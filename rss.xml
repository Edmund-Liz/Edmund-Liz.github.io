<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>By Liz</title>
        <link>http://example.com</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Sat, 02 Dec 2023 11:43:52 +0800</pubDate>
        <lastBuildDate>Sat, 02 Dec 2023 11:43:52 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">http://example.com/2023/12/02/%E7%B1%BB%EF%BC%8C%E5%AF%B9%E8%B1%A1%EF%BC%8C%E7%BB%A7%E6%89%BF%EF%BC%8C%E9%87%8D%E8%BD%BD%E5%92%8C%E4%BF%AE%E9%A5%B0%E7%AC%A6%E2%80%94%E2%80%94Java%E8%AF%AD%E6%B3%95%E7%89%B9%E6%80%A7/</guid>
            <title></title>
            <link>http://example.com/2023/12/02/%E7%B1%BB%EF%BC%8C%E5%AF%B9%E8%B1%A1%EF%BC%8C%E7%BB%A7%E6%89%BF%EF%BC%8C%E9%87%8D%E8%BD%BD%E5%92%8C%E4%BF%AE%E9%A5%B0%E7%AC%A6%E2%80%94%E2%80%94Java%E8%AF%AD%E6%B3%95%E7%89%B9%E6%80%A7/</link>
            <pubDate>Sat, 02 Dec 2023 11:43:52 +0800</pubDate>
            <description><![CDATA[ &lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs text&#34;&gt;title: 类，对象，继承，重载和修饰符——Java语法特性&lt;br&gt;date: 2023/12/2&lt;br&gt;tags:&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;类和对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#类和对象&#34;&gt;#&lt;/a&gt; 类和对象&lt;/h2&gt;
&lt;p&gt;我们从 “白马非马 “这句话开始，大多数人一眼认为荒谬的原因是，他们是这样理解的：白马（对象）非马（类），这当然是错误的，但这句话实际的意思是：白马（类）非马（类）。&lt;/p&gt;
&lt;p&gt;我们把这句话转化成 Java 代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//假设有两个这样的类&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Horse&lt;/span&gt;();&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;WhiteHorse&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Horse&lt;/span&gt;();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//然后在某个方法里创建两个实例&lt;/span&gt;&lt;br&gt;Horse a=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Horse&lt;/span&gt;();&lt;br&gt;WhiteHorse b=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;WhiteHorse&lt;/span&gt;();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;白马（对象）非马（类）这句话就成了这样：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;(b &lt;span class=&#34;hljs-keyword&#34;&gt;instanceof&lt;/span&gt; Horse)==&lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;instanceof 是 Java 的一个二元操作符，类似于 ==，&amp;gt;，&amp;lt; 等操作符。&lt;/p&gt;
&lt;p&gt;instanceof 是 Java 的保留关键字。它的作用是测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个判断是错误的，具体的原因我们后面再讲， &lt;code&gt;==&lt;/code&gt;  左边的式子返回的布尔值将会是 true，并不等于 &lt;code&gt;==&lt;/code&gt;  右边的 false，这与 “现实中一眼看上去的白马非马这四个字是错误的” 这件事相同。&lt;/p&gt;
&lt;p&gt;但是实际上呢，白马非马这句话指的是 class Horse 不等于 class WhiteHorse。这里我没法给出一个代码来表示他，无论是在现实中还是 Java 语言中，如果两个概念相同，那么他们只是同一个概念的不同名字而已，而在 Java 中，如果两个类的持有字段，方法完全相同，那你干嘛要创建两个不同的类？&lt;/p&gt;
&lt;h2 id=&#34;继承&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#继承&#34;&gt;#&lt;/a&gt; 继承&lt;/h2&gt;
&lt;p&gt;回到这句话：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs Java&#34;&gt;(b &lt;span class=&#34;hljs-keyword&#34;&gt;instanceof&lt;/span&gt; Horse)==&lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为什么 &lt;code&gt;==&lt;/code&gt;  右边会返回 true 呢？b 在初始化的时候使用的明明是 &lt;code&gt;new WhiteHorse();&lt;/code&gt;  而不是 &lt;code&gt;new Horse();&lt;/code&gt;  这是因为 instanceof 操作符实际上和现实生活中的朴素逻辑是一致的，&lt;strong&gt;子类的对象一定是父类的实例，父类的对象不一定是子类的实例&lt;/strong&gt;（实例和对象其实是差不多的意思）。在创建 WhiteHorse 类的时候，类名后面使用 extends 使得 WhiteHorse 成为了 Horse 的子类，二者的关系就被称之为继承。子类可以调用父类所有&lt;strong&gt;非 private&lt;/strong&gt;（修饰符）的方法。&lt;/p&gt;
&lt;h3 id=&#34;为什么需要继承&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#为什么需要继承&#34;&gt;#&lt;/a&gt; 为什么需要继承？&lt;/h3&gt;
&lt;p&gt;假如你现在要编写两个类，黑马和白马。假设他们的代码长这样：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BlackHorse&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String name;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; age;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; name;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.name = name;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; age;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setAge&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; age)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.age = age;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;BlackHorse&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; age)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.name=name;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.age=age;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;introduce&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;A &amp;quot;&lt;/span&gt;+age+&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-year-old black horse named &amp;quot;&lt;/span&gt;+name);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后编写白马的时候再写一遍&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs Java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;WhiteHorse&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String name;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; age;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; name;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.name = name;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; age;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setAge&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; age)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.age = age;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;WhiteHorse&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; age)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.name=name;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.age=age;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;introduce&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;A &amp;quot;&lt;/span&gt;+age+&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-year-old white horse named &amp;quot;&lt;/span&gt;+name);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在实际生产当中，有许多类之间有大量的相同相似方法和完全不同的方法，重复编写和查找修改是一件枯燥无意义且生产力低下的事情，那么此时提高代码的复用性就非常重要。&lt;/p&gt;
&lt;p&gt;那么我们可以写一个父类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Horse&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String name;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; age;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;Horse&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; age)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.name = name;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.age = age;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; name;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.name = name;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; age;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setAge&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; age)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.age = age;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后写两个子类&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;WhiteHorse&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Horse&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;WhiteHorse&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name,&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; age)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(name,age);&lt;span class=&#34;hljs-comment&#34;&gt;//注意此处的super&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;introduce&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;A &amp;quot;&lt;/span&gt;+&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.getAge()+&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-year-old white horse named &amp;quot;&lt;/span&gt;+&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.getName());&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BlackHorse&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Horse&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;BlackHorse&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name,&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; age)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(name,age);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;introduce&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;A &amp;quot;&lt;/span&gt;+&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.getAge()+&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-year-old black horse named &amp;quot;&lt;/span&gt;+&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.getName());&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样就达到了提高代码复用性的目的。&lt;/p&gt;
&lt;h2 id=&#34;重载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#重载&#34;&gt;#&lt;/a&gt; 重载&lt;/h2&gt;
&lt;p&gt;重载是指在同一个类当中，多个方法名字相同，而参数不同。实际上这种特性的作用主要是简化代码，或者说提高代码的可读性，具体没什么好说的，能用就用。给个示例吧：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;HorseSeller&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; Horse horse;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;introduceHorse&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(WhiteHorse horse)&lt;/span&gt;&amp;#123;&lt;br&gt;        horse.introduce();&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;introduceHorse&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(BlackHorse horse)&lt;/span&gt;&amp;#123;&lt;br&gt;        horse.introduce();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译器依靠方法签名来分辨不同的方法，签名由方法名 + 形参的有序列表构成。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; num,String string)&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String string,&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; num)&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//这被认为是两个不同的方法&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是方法签名并不包括返回值类型。即两个参数相同的方法即使返回值不同也不被允许同时存在于一个类中。这个的原因是调用方法时返回值可能会被舍弃。我们来看一段代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;span class=&#34;hljs-comment&#34;&gt;//fun1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;span class=&#34;hljs-comment&#34;&gt;//fun2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//看上去是两个很不同的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; num=get();&lt;span class=&#34;hljs-comment&#34;&gt;//显然需要调用fun1&lt;/span&gt;&lt;br&gt;    String s=get();&lt;span class=&#34;hljs-comment&#34;&gt;//显然需要调用fun2&lt;/span&gt;&lt;br&gt;   	&lt;br&gt;    get();&lt;span class=&#34;hljs-comment&#34;&gt;//那么现在呢？&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当返回值被赋值给某个变量时，编译器可以很轻易地找到应该调用的方法，但问题在于，不是所有的返回值都会被使用，当返回值被舍弃时，不同的返回值无法区分不同的方法。&lt;/p&gt;
&lt;h3 id=&#34;重载与重写&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#重载与重写&#34;&gt;#&lt;/a&gt; 重载与重写&lt;/h3&gt;
&lt;p&gt;与重载类似的是，子类可以重写父类的方法。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;father&lt;/span&gt;&amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;father&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;son&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;father&lt;/span&gt;()&amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;son&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Test&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;br&gt;        Son son=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Son&lt;/span&gt;();&lt;br&gt;        son.fun();&lt;span class=&#34;hljs-comment&#34;&gt;//将输出&amp;quot;son&amp;quot;&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同为重名方法，重写与重载的区别主要有三点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;重写要求方法的签名完全相同，重载要求方法的签名不同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重写是不同类中，子类覆盖了父类的方法。子类实例只能调用重写之后的方法，父类实例只能调用重写之前的方法。同一类型的实例只能调用同一种方法。重载是同一类中多个方法共存，同一实例可以通过传入不同参数，调用不同种的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重写对方法的要求更加严格，子类重写方法的返回值必须和父类同签名方法的返回值相同，或为该方法返回值的子类，在低版本的 Java 中要求必须相同&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与方法对应，子类和父类的变量也具有类似重写的机制。子类和父类可以具有两个同名变量，这两个变量之间相互独立（即使变量名的前缀完全一致，他们依然可以持有不同的值）。&lt;/p&gt;
&lt;p&gt;你可以在父类中定义一个 &lt;code&gt;int a&lt;/code&gt; ，然后在子类中再定义一个 &lt;code&gt;int a&lt;/code&gt; ，此时子类持有两个不同的 a，分别称为 &lt;code&gt;父类a&lt;/code&gt;  和 &lt;code&gt;子类a&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;如果子类未重写父类的 getter 和 setter 方法，任何地方使用的 getter 和 setter 方法都将默认调用父类的 getter 和 setter，操作 &lt;code&gt;父类a&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;在子类中的所有代码中， &lt;code&gt;super.a&lt;/code&gt;  则为 &lt;code&gt;父类a&lt;/code&gt; ， &lt;code&gt;a&lt;/code&gt;  或 &lt;code&gt;this.a&lt;/code&gt;  则为 &lt;code&gt;子类a&lt;/code&gt; （存在形参名为 &lt;code&gt;a&lt;/code&gt;  的方法中 &lt;code&gt;a&lt;/code&gt;  仍为形参）。&lt;/p&gt;
&lt;p&gt;在其他类当中，只能调用方法来操作 &lt;code&gt;父类a&lt;/code&gt; ，无法直接得到 &lt;code&gt;父类a&lt;/code&gt; ， &lt;code&gt;son.a&lt;/code&gt;  只会是 &lt;code&gt;子类a&lt;/code&gt; ，即使 &lt;code&gt;子类a&lt;/code&gt;  无法访问也只会报错而不是转向 &lt;code&gt;父类a&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;修饰符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#修饰符&#34;&gt;#&lt;/a&gt; 修饰符&lt;/h2&gt;
&lt;p&gt;Java 的修饰符用于定义类，方法，和变量。修饰符分为两类：访问修饰符和非访问修饰符。&lt;/p&gt;
&lt;h3 id=&#34;访问修饰符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问修饰符&#34;&gt;#&lt;/a&gt; 访问修饰符&lt;/h3&gt;
&lt;p&gt;访问修饰符可以用于修饰类，方法，变量，在一共有四种不同的访问级别，分别对应三种修饰符和无修饰符，权限由无限制到最严格依次为：&lt;/p&gt;
&lt;h6 id=&#34;public&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#public&#34;&gt;#&lt;/a&gt; public：&lt;/h6&gt;
&lt;p&gt;可以被同一包内的任何类访问，其他包内的类使用 import 导入后访问。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; A;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Horse&lt;/span&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; A;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Test1&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String args[])&lt;/span&gt;&amp;#123;&lt;br&gt;        Horse horse=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Horse&lt;/span&gt;();&lt;br&gt;        horse.fun();&lt;span class=&#34;hljs-comment&#34;&gt;//OK&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; B;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; A.Horse;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Test2&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String args[])&lt;/span&gt;&amp;#123;&lt;br&gt;        Horse horse=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Horse&lt;/span&gt;();&lt;br&gt;        horse.fun();&lt;span class=&#34;hljs-comment&#34;&gt;//OK&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&#34;protected&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#protected&#34;&gt;#&lt;/a&gt; protected：&lt;/h6&gt;
&lt;p&gt;不能用于修饰外部类，因为 protected 的类将无法被其他包下的类继承：父类被继承的前提是可被访问，被 protected 修饰的父类可被访问的前提是被继承，二者互为前提。&lt;/p&gt;
&lt;p&gt;protect 的访问规则比较复杂，主要有三点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;与父类同一包的任何类，能通过任何父类或子类实例访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与父类不同包的任何非子类不能访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与父类不同包的子类，只能通过本子类实例访问，不能通过父类实例或其他子类实例访问。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; A;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Father&lt;/span&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; A;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Son1&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Father&lt;/span&gt;&amp;#123;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; A;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; B.Son2;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Test1&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String args[])&lt;/span&gt;&amp;#123;&lt;br&gt;        Father father=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Father&lt;/span&gt;();&lt;br&gt;        Son1 son1=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Son1&lt;/span&gt;();&lt;br&gt;        Son2 son2=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Son2&lt;/span&gt;();&lt;br&gt;        father.fun();&lt;br&gt;        son1.fun();&lt;br&gt;        son2.fun();&lt;span class=&#34;hljs-comment&#34;&gt;//同一包内任意访问&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; B;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; A.Father;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; A.Son1;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Son2&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Father&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String args[])&lt;/span&gt;&amp;#123;&lt;br&gt;        Father father=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Father&lt;/span&gt;();&lt;br&gt;        Son1 son1=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Son1&lt;/span&gt;();&lt;br&gt;        Son2 son2=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Son2&lt;/span&gt;();&lt;br&gt;        Son3 son3=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Son3&lt;/span&gt;();&lt;br&gt;        father.fun();&lt;span class=&#34;hljs-comment&#34;&gt;//报错&lt;/span&gt;&lt;br&gt;        son1.fun();&lt;span class=&#34;hljs-comment&#34;&gt;//报错&lt;/span&gt;&lt;br&gt;        son2.fun();			&lt;span class=&#34;hljs-comment&#34;&gt;//通过&lt;/span&gt;&lt;br&gt;        son3.fun();&lt;span class=&#34;hljs-comment&#34;&gt;//报错&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; B;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; A.Father;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Son3&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Father&lt;/span&gt;&amp;#123;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; B;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; A.Father;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Test2&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String args[])&lt;/span&gt;&amp;#123;&lt;br&gt;        Father father=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Father&lt;/span&gt;();&lt;br&gt;        Son1 son1=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Son1&lt;/span&gt;();&lt;br&gt;        Son2 son2=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Son2&lt;/span&gt;();&lt;br&gt;        Son3 son3=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Son3&lt;/span&gt;();&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//下面四行没有一行能跑的&lt;/span&gt;&lt;br&gt;        father.fun();&lt;br&gt;        son1.fun();&lt;br&gt;        son2.fun();&lt;br&gt;        son3.fun();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;无修饰符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#无修饰符&#34;&gt;#&lt;/a&gt; 无修饰符：&lt;/h6&gt;
&lt;p&gt;可以被同一包内的任何类访问，其他包内的类无法访问。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; A;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Horse&lt;/span&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; A;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Test1&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String args[])&lt;/span&gt;&amp;#123;&lt;br&gt;        Horse horse=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Horse&lt;/span&gt;();&lt;br&gt;        horse.fun();&lt;span class=&#34;hljs-comment&#34;&gt;//OK&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; B;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; A.Horse;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Test2&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String args[])&lt;/span&gt;&amp;#123;&lt;br&gt;        Horse horse=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Horse&lt;/span&gt;();&lt;br&gt;        horse.fun();&lt;span class=&#34;hljs-comment&#34;&gt;//ERROR&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&#34;private&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#private&#34;&gt;#&lt;/a&gt; private:&lt;/h6&gt;
&lt;p&gt;不能用于修饰外部类，private 的类毫无意义。只允许被本类访问。&lt;/p&gt;
&lt;h6 id=&#34;重写中的访问修饰符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#重写中的访问修饰符&#34;&gt;#&lt;/a&gt; 重写中的访问修饰符：&lt;/h6&gt;
&lt;p&gt;除了 private 方法无法重写外，子类重写的父类方法，必须具有和父类相同或比父类可用范围更大的访问修饰符。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;为什么是privategettersetter而不是public&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#为什么是privategettersetter而不是public&#34;&gt;#&lt;/a&gt; 为什么是 private+getter+setter 而不是 public？&lt;/h4&gt;
&lt;p&gt;在编写一个新的类时，教程往往指示你选择将变量使用 private 修饰，然后编写 getter 和 setter 方法，并给予 public 权限，而不是直接将变量使用 public 修饰。为什么要这样？大多数教程会告诉你，这是为了遵守 Java 的 “封装” 规则，但是实际上，每一个学 Java 的人都在说 “封装”，但是其中的大多数人根本不懂得 “封装”，用这个词来解释就好像说 “祖宗之法不可变” 一样。事实就是，如果你真的只是给变量一个 private，然后用快捷键生成两个 public 的 getter 和 setter，那么使用 public 在工程效果上是完全一致的。那么为什么不使用更加简单的 public？&lt;/p&gt;
&lt;p&gt;这有很多方面的原因：&lt;/p&gt;
&lt;p&gt;如果你需要检查一个变量的调用，就可以在 getter 中输出，或者断点调试。&lt;/p&gt;
&lt;p&gt;或者你需要控制一个变量的范围，例如一个 int score，成绩只可能在 0~100 之间，但用户在输入时可能输入其他的值，你就需要在 setter 中增加判断，抛出异常或者其他操作&lt;/p&gt;
&lt;p&gt;读写分离，你可能想限制该变量的写 s 入权限，将 setter 方法和 getter 方法设置为不同的写入权限。&lt;/p&gt;
&lt;p&gt;再如果，你的工程项目中需要使用一些项目框架，例如 Spring，有些框架的规范规定你必须给变量创建 getter 和 setter 方法，这利于对变量管理同一化，而不是将 public 和 private+getter+setter 分开管理。&lt;/p&gt;
&lt;p&gt;对于自动生成的 getter 和 setter，使用 public 在效果上与之没有任何区别，但我仍然建议你使用 private+getter+setter，仅仅为了建立习惯。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;非访问修饰符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#非访问修饰符&#34;&gt;#&lt;/a&gt; 非访问修饰符&lt;/h3&gt;
&lt;p&gt;非访问修饰符可以用于修饰类，方法，变量。严格地讲非访问控制修饰符有六种，但是其中有三种用于线程相关，这里只讲前三种：static，final，abstract。&lt;/p&gt;
&lt;h6 id=&#34;static&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#static&#34;&gt;#&lt;/a&gt; static&lt;/h6&gt;
&lt;p&gt;只能用于修饰类持有的方法和变量。以是否是 static 为区分，方法和类有一些别称，是 static 的称为类方法，类变量，不是的称为成员方法，成员变量。在满足访问权限的前提下，类方法和变量都可以直接通过类调用。&lt;/p&gt;
&lt;p&gt;类方法中无法使用成员变量。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;A&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; num1;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; num2;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//	sout(num1);//这里不注释掉会报错&lt;/span&gt;&lt;br&gt;    	sout(num2);&lt;span class=&#34;hljs-comment&#34;&gt;//ok&lt;/span&gt;&lt;br&gt;		sout(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;static fun&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Test&lt;/span&gt;&amp;#123;&lt;br&gt;     &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;br&gt;        A a=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;A&lt;/span&gt;();&lt;br&gt;        a.fun();&lt;span class=&#34;hljs-comment&#34;&gt;//ok&lt;/span&gt;&lt;br&gt;         &lt;br&gt;        A.fun();&lt;span class=&#34;hljs-comment&#34;&gt;//ok&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;static 的作用在于，标识这个变量，使得这个变量成为整个类共享的变量。也就是在程序的同一位置，任意一个该类的实例，或者直接使用类名去调用这个 static 变量都将得到同样的结果。&lt;/p&gt;
&lt;h6 id=&#34;final&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#final&#34;&gt;#&lt;/a&gt; final&lt;/h6&gt;
&lt;p&gt;可以用于修饰类，方法，变量。&lt;/p&gt;
&lt;p&gt;final 修饰的类无法被继承。&lt;/p&gt;
&lt;p&gt;final 修饰的方法无法被子类重写。&lt;/p&gt;
&lt;p&gt;final 修饰的变量无法被更改，且必须在声明式就初始化。&lt;/p&gt;
&lt;h6 id=&#34;abstract&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#abstract&#34;&gt;#&lt;/a&gt; abstract&lt;/h6&gt;
&lt;p&gt;用于修饰类和方法，即抽象类，抽象方法。&lt;/p&gt;
&lt;p&gt;抽象类无法实例化，抽象方法没有方法体，且抽象方法只能存在于抽象类中。声明一个抽象类的唯一目的就是为相似的类提供一个父类，抽象类的非抽象子类必须实现所有父类的所有抽象方法。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs Java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;A&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fun1&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;A&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//抽象子类，可以不实现fun1()&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fun2&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;C&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;B&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//C不是抽象类，必须实现继承树上所有的抽象方法&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fun2&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fun1&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 style=&#34;text-align:right&#34;&gt;
    ——By Liz
&lt;/h1&gt;&lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/05/19/%E5%85%B3%E4%BA%8E%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%B7%A5%E5%85%B7Glide%E7%9A%84%E4%B8%80%E7%82%B9%E4%BB%8B%E7%BB%8D/</guid>
            <title>关于图片加载工具Glide的一点介绍</title>
            <link>http://example.com/2023/05/19/%E5%85%B3%E4%BA%8E%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%B7%A5%E5%85%B7Glide%E7%9A%84%E4%B8%80%E7%82%B9%E4%BB%8B%E7%BB%8D/</link>
            <pubDate>Fri, 19 May 2023 19:08:27 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;在进行网络相关的代码编写的时候大家肯定都会遇到一些跟图片有关的问题，图片跟普通的信息不一样，是一个文件，接受起来是相当不方便的。那么！！！此时此刻，就需要一个非常牛逼的工具出场了，Glide 可以以各种各样的方法加载图片，堪称 “一行代码解决一切图片加载问题”。Glide 是一款由 Bump Technologies 开发的图片加载框架，要想使用 Glide，首先需要将这个库导入依赖库，搜索 glide 就行，或者在 gradle 文件中 dependencies 里加上一行（要用网络功能，记得声明网络权限）：&lt;/p&gt;
&lt;figure class=&#34;highlight groovy&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs groovy&#34;&gt;implementation &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;com.github.bumptech.glide:glide:4.15.0&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;简单使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简单使用&#34;&gt;#&lt;/a&gt; 简单使用&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;xxxxx&amp;quot;&lt;/span&gt;&lt;br&gt;Glide.with(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;)&lt;br&gt;    .load(url)&lt;br&gt;    .into(imageView);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于 Glide 加载图片而言，上面这一行代码是最简单，最理想化的情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;with&lt;/strong&gt; 方法支持传入 Context，Activity，Fragment 类型的参数。也就是说，不管你调用 Glide 的方法在 Activity 中还是在 Fragment 中，你都可以无脑传入一个 this，即使不在这俩项当中，你也可以使用任意传入的 Context 参数，退一万步讲，哪怕你在写这个类时根本忘记了传入 Context，你也可以直接传入 ApplicationContext（不建议）。with 方法传入的参数决定了 Glide 加载图片的生命周期，图片会随着 with 方法传入参数的销毁而销毁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;load&lt;/strong&gt; 方法比 with 方法有更多的重载，可以说 Glide 的神奇之处就在 load 方法中，它支持传入 url 参数（就像上面的代码一样），会访问传入的网址获取图片，也可以直接传入 File 文件，甚至可以传入一个应用资源的 id，总之你随便塞一个可以获取图片的对象进去，它多半可以直接给你加载出来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;into&lt;/strong&gt; 就不用说了，你想给这个图片加载到哪就填哪就行（前提是是个 View 控件）。&lt;/p&gt;
&lt;h2 id=&#34;占位图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#占位图&#34;&gt;#&lt;/a&gt; 占位图&lt;/h2&gt;
&lt;p&gt;为什么说上面这一行代码是最简单最理想化的情况呢？当然是因为实际生产中，Glide 当然会有一些奇奇怪怪的问题出现，例如网太卡，图片加载太慢，或者是根本就加载不出来的情况等等，这个时候，就轮到&lt;strong&gt;占位图&lt;/strong&gt;出手了。&lt;/p&gt;
&lt;p&gt;占位图分为三种，一种是&lt;strong&gt;图片加载中&lt;/strong&gt;的占位图，第二种是&lt;strong&gt;图片加载失败&lt;/strong&gt;的占位图，最后一种比较特殊，是当 load 方法所请求的&lt;strong&gt;图片不存在（为 null）&lt;strong&gt;时的占位图，他们对应的方法分别是&lt;/strong&gt; placeholder&lt;/strong&gt;，&lt;strong&gt;error&lt;/strong&gt; 和&lt;strong&gt; fallback&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;具体使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#具体使用&#34;&gt;#&lt;/a&gt; 具体使用&lt;/h5&gt;
&lt;p&gt;以上面的代码为例，我们先来尝试使用 placeholder 方法、&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;Glide.with(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;)&lt;br&gt;    .load(url)&lt;br&gt;    .placeholder(R.drawable.loading)&lt;br&gt;    .into(imageView);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;相信大家都能发现，在这里传入的参数是&lt;strong&gt; R.drawable.loading&lt;/strong&gt;，这是因为 placeholder 方法只支持图片资源 id 参数，原因显而易见，你要加载的图片都还没加载出来，哪有工夫给你再另外加载一个占位图。&lt;/p&gt;
&lt;p&gt;load 方法会返回一个属于 **RequestBuilder&lt;TranscodeType&gt;** 类的对象，placeholder 就是这个类的方法，它同样会返回一个相同类的对象，并不影响后续方法的调用，后续的 error 方法和 fallback 方法也是一样。&lt;/p&gt;
&lt;p&gt;这三种方法在使用上不分先后，而且如果你多个方法一起使用，且需要多次调用 Glide，嫌弃代码重复，还可以手动创建 RequestOptions 对象，通过 apply 方法重复使用它&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;RequestOptions&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;options&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RequestOptions&lt;/span&gt;()&lt;br&gt;            .placeholder(R.drawable.loading)&lt;br&gt;            .error(R.drawable.error)&lt;br&gt;            .fallback(R.drawable.fallback);&lt;br&gt;Glide.with(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;)&lt;br&gt;            .load(url)&lt;br&gt;            .apply(options)&lt;br&gt;            .into(imageView);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;图片的大小与比例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#图片的大小与比例&#34;&gt;#&lt;/a&gt; 图片的大小与比例&lt;/h2&gt;
&lt;p&gt;除了网络问题之外，我们所需要显示的图片和布局控件之间也不可避免地会有一些冲突，例如当我们需要一张正方形 200*200 的图片，用户却上传了一张 1000*1000 像素的图片，或者 200*500 的图片。这时如果你不做任何处理，Glide 就会让你的图片以各种各样诡异的角度显示出来，比如你上传了一张全身美照然后却只显示了你的一张糊图图大脸。&lt;/p&gt;
&lt;p&gt;幸好，Glide 支持指定图片大小和缩略图，当然，作为地表最强（）图片显示工具，即使你不做任何操作，Glide 也不会容许内存浪费问题的出现，它会自动判断 ImageView 的大小然后只加载这么大的图片。当然，这是不够的。&lt;/p&gt;
&lt;h5 id=&#34;override&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#override&#34;&gt;#&lt;/a&gt; override&lt;/h5&gt;
&lt;p&gt;override 方法要求你提供两个 Int 参数，分别表示所显示图片的宽高像素要求，然后 Glide 就只会将图片加载成你所要求的大小，而不管你的 imageView 有多大&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;Glide.with(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;)&lt;br&gt;     .load(url)&lt;br&gt;     .apply(options)&lt;br&gt;     .override(&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;)&lt;br&gt;     .into(imageView);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;centercrop与fitcenter&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#centercrop与fitcenter&#34;&gt;#&lt;/a&gt; CenterCrop（）与 FitCenter（）&lt;/h5&gt;
&lt;p&gt;显然，截取一个固定大小的图片不是我们最想要的，用户上传他的全身美照不是让我们看他的糊图图大脸的，那么，为了用户，对它使用 centerCrop 和 fitCenter 吧！&lt;/p&gt;
&lt;p&gt;CenterCrop 和 FitCenter 这几个单词其实我们见过，对 ImageView 进行 ScaleType 属性设置的时候见过，他们也的确是相对应的。这两个方法不需要传参，只要调用就会起作用。以 centerCrop 举例，塞进 load 和 into 两个方法调用之间去就可以了&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;Glide.with(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;)&lt;br&gt;     .load(url)&lt;br&gt;     .apply(options)&lt;br&gt;     .centerCrop()&lt;br&gt;     .into(imageView);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;centerCrop 和 fitCenter 的区别不大，centerCrop 是将图片缩放到可以完全填充 imageView 的最小尺寸，fitCenter 则是将图片缩放到 imageView 可以完整地显示图片。简而言之，centerCrop 保证 imageView 被填满，但不保证图片全部被显示出来，图片依然有可能被截取掉一部分；fitCenter 保证图片全部显示出来，但不保证 imageView 被填满，布局控件中可能会有未被填充的部分。&lt;/p&gt;
&lt;h2 id=&#34;图片的动态与静态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#图片的动态与静态&#34;&gt;#&lt;/a&gt; 图片的动态与静态&lt;/h2&gt;
&lt;p&gt;有的时候我们不仅仅想显示呆板的静态图片，还想显示一些更活泼的 gif 动图（甚至是本地的 mp4 文件），这个时候我就必须质问还在使用 Picasso 的你，什么年代了还在用传统图片显示工具！虽然 Picasso 支持对请求应用 Transformation 来达到各种变换，例如旋转或者一些简单滤镜，但是 Picasso 不支持 gif！而当 Glide 请求得到的图片是一个 Gif 时，Glide 会自动地显示出 Gif 而不需要你做任何额外的操作。当然如果你不想要 Gif，Glide 也会无条件地支持你。你可以使用 asBitmap 来使 gif 强行显示为静态，也就是只显示这张动图的第一帧图片&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs Java&#34;&gt;Glide.with(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;)&lt;br&gt;     .load(url)&lt;br&gt;     .apply(options)&lt;br&gt;     .centerCrop()&lt;br&gt;     .asBitmap()&lt;br&gt;     .into(imageView);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而你非常需要 gif 的话，也可以使用 asGif 来强行显示 gif&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;Glide.with(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;)&lt;br&gt;     .load(url)&lt;br&gt;     .apply(options)&lt;br&gt;     .centerCrop()&lt;br&gt;     .asGif()&lt;br&gt;     .into(imageView);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是如果请求所得到的图片只是一张普通的图片而不是 gif，那么此时 Glide 就会调出 error 方法，显示占位图（所以这个方法没啥用）&lt;/p&gt;
&lt;h2 id=&#34;图片加载的优先级&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#图片加载的优先级&#34;&gt;#&lt;/a&gt; 图片加载的优先级&lt;/h2&gt;
&lt;p&gt;众所周知，如果我们不需要显示图片，那么我们就不需要显示图片；如果我们需要显示图片，那么我们往往就会需要多次显示图片。但是图片的显示需求有时并不相同，页面边缘的小广告已经出来了，女朋友发给你的照片却还在加载，用户这个时候可能就有点想骂人了。&lt;/p&gt;
&lt;p&gt;那么，轮到 priority 出场了，priority 需要你传入一个指定的枚举类，用以表示你希望这个图片被加载的优先级。这些优先级有：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Priority.LOW&lt;/strong&gt;，&lt;strong&gt;Priority.NORMAL&lt;/strong&gt;，&lt;strong&gt;Priority.HIGH&lt;/strong&gt;，&lt;strong&gt;Priority.IMMEDIAT&lt;/strong&gt; 四种&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;Glide.with(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;)&lt;br&gt;    .load(url)&lt;br&gt;    .priority(Priority.HIGH)&lt;br&gt;    .into(imageView);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在用户也许可以先看见他的女朋友了。“也许” 是因为优先级并不是完全严格遵守的。Glide 将会用他们作为一个准则，尽可能的处理这些请求，但是不能保证所有的图片都会按照所有要求的顺序加载。&lt;/p&gt;
&lt;p&gt;from Liz&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/03/27/Retrofit%E5%85%A5%E9%97%A8/</guid>
            <title>Retrofit入门</title>
            <link>http://example.com/2023/03/27/Retrofit%E5%85%A5%E9%97%A8/</link>
            <pubDate>Mon, 27 Mar 2023 22:57:03 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;因为原理跟 okhttp 有关就不讲了，这里就只讲一些工作方式，以及一些 bug&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;建立api接口和返回body的类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#建立api接口和返回body的类&#34;&gt;#&lt;/a&gt; 建立 Api 接口和返回 body 的类&lt;/h2&gt;
&lt;p&gt;首先需要建立一个 Api 接口，在需要用到网络请求时创建一个 Api 接口实例，通过这个实例对象调用方法来实现网络请求，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Api&lt;/span&gt; &amp;#123;  &lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@POST(&amp;quot;login&amp;quot;)&lt;/span&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@FormUrlEncoded&lt;/span&gt;    &lt;br&gt;    Call&amp;lt;SignInResult&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;loginTest&lt;/span&gt;        &lt;br&gt;        &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-meta&#34;&gt;@Field(&amp;quot;username&amp;quot;)&lt;/span&gt;String username, &lt;span class=&#34;hljs-meta&#34;&gt;@Field(&amp;quot;password&amp;quot;)&lt;/span&gt;String password)&lt;/span&gt;; &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这几行代码当中，蓝字 Api 显然是随便取的接口名称，下方的 loginTest 方法就是创建 Api 接口实例后需要调用的方法，他的返回体是一个 Retrofit 内部封装的类 Call&lt;Class&gt;类，尖括号中是创建的一个用于接收返回体的类&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SignInResult&lt;/span&gt; &amp;#123;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String msg;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String token;     &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;getMsg&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; msg;    &lt;br&gt;    &amp;#125;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setMsg&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String msg)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.msg = msg;    &lt;br&gt;    &amp;#125;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;getToken&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; token;    &lt;br&gt;    &amp;#125;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setToken&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String token)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.token = token;    &lt;br&gt;    &amp;#125; &lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个 SignInResult 用于接收此次 loginTest 请求得到的返回信息，举例登陆成功时，后端所返回的 json 信息是这样的&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs json&#34;&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;msg&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;登录成功,获得token.&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;    				&lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;token&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySWQiOjE2LCJleHAiOjE2Nzk5NzgzNzYsImlhdCI6MTY3NzM4NjM3NiwiaXNzIjoiNDMuMTM4LjYxLjQ5Iiwic3ViIjoi5Y2O5bCP5ZyILiJ9.7TWOTCjPTGihPhn2v0wwwUqdLpF8x4cMm3bfw1wAbHs&amp;quot;&lt;/span&gt; &lt;br&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里，要接收后端所返回的 “msg” 信息，那么上面所写的 SignInResult 类中就必须有一个对应的 String 字段名为 “msg”，假设 SignInResult 中的字段名不是 “msg” 而是 “message”，那么接收到后端返回的信息之后，就无法得到这个” 登陆成功，获得 token“的字符串，此时调用 getMsg 方法也只会得到 null。&lt;/p&gt;
&lt;p&gt;同理，登陆失败之后，后端返回的信息是这样的&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs json&#34;&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;msg&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Invalid username or password&amp;quot;&lt;/span&gt; &lt;br&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时依然可以用上面的 SIgnInResult 类接收信息，得到这个 msg 信息，然后通过 getToken 得到了 null 来判断登陆失败。&lt;/p&gt;
&lt;h2 id=&#34;调用retrofit网络请求&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#调用retrofit网络请求&#34;&gt;#&lt;/a&gt; &lt;strong&gt;调用 Retrofit 网络请求&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;创建完网络请求需要的 Api 接口之后，就可以直接到需要用到这个网络请求的 Activity 当中去敲代码了！&lt;/p&gt;
&lt;p&gt;毫无疑问首先我们要创建 Retrofit 实例和上一步创建的 Api 接口实例，例如&lt;/p&gt;
&lt;p&gt;private Retrofit mRetrofit; private Api mApi;&lt;/p&gt;
&lt;p&gt;然后将这个 Retrofit 实例与 url 绑定&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;mRetrofit=&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Retrofit&lt;/span&gt;.Builder()&lt;br&gt;    .baseUrl(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;)                &lt;br&gt;    .addConverterFactory(GsonConverterFactory.create())&lt;br&gt;    .build();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一行代码中的 baseUrl 是这个网络请求中需要链接的 url，一般是服务器地址，第二行代码是用于把返回的 json 信息解码为我们创建的 SIgnInResult 类对象。&lt;/p&gt;
&lt;p&gt;然后通过这个 Retrofit 实例给 Api 接口实例赋值&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;mApi=mRetrofit.create(Api.class);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建完毕之后，首先要确定这次网络请求要发送的信息是什么&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;Call&amp;lt;SignInResult&amp;gt; apiResult=mApi.loginTest(usernameEdit.getText().toString(),passwordEdit.getText().toString());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也就是说，创建一个 Call&lt;SignInResult&gt;实例，给它赋值为前面创建的 Api 接口实例调用方法 loginTest 后得到的返回值，而这里调用 loginTest 需要提供的两个参数是创建 Api 接口时就写了的，用户名和密码。&lt;/p&gt;
&lt;p&gt;然后将这个实例加入需要发送的网络请求的队列当中，enqueue 指异步请求，同步请求为 ex 什么东西（剩下的交给 AS），同步与异步的区别就是同步请求要等待前一个请求得到返回之后才能发送下一个请求，而异步可以像一个服务器的舔狗一样一直发，就算不回也一直发&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;apiResult.enqueue(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Callback&lt;/span&gt;&amp;lt;SignInResult&amp;gt;() &amp;#123;             &lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;             &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;onResponse&lt;/span&gt;                 &lt;br&gt;        &lt;span class=&#34;hljs-params&#34;&gt;(Call&amp;lt;SignInResult&amp;gt; call, Response&amp;lt;SignInResult&amp;gt; response)&lt;/span&gt; &amp;#123;&lt;br&gt;        String token=response.body().getToken();                        &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (token!=&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;)&amp;#123;&lt;br&gt;            LoginSucceeded();&lt;span class=&#34;hljs-comment&#34;&gt;//使用这个方法来启动下一个Activity&lt;/span&gt;&lt;br&gt;            saveToken(token);&lt;br&gt;        &amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&amp;#123; Toast.makeText(SignInActivity.&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;,response.body().getMsg().toString(),Toast.LENGTH_SHORT).show();&lt;br&gt;             &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;onFailure&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-params&#34;&gt;(Call&amp;lt;SignInResult&amp;gt; call, Throwable t)&lt;/span&gt; &amp;#123;&lt;br&gt;        Toast.makeText(SignInActivity.&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;登陆失败！&amp;quot;&lt;/span&gt;,Toast.LENGTH_SHORT).show();&lt;br&gt;    &amp;#125;  &lt;br&gt;    &lt;br&gt;&amp;#125;);&lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;XXX&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输入 enqueue 之后，AS 会自动弹出两个空的方法，onResponse 和 onFailure，这两个方法中前者是请求成功调用的方法，后者是请求失败调用的方法。这里需要注意的是，登录失败不是请求失败，登陆失败本身也需要请求成功来获得 &amp;quot;Invalid username or password&amp;quot; 这个返回数据。&lt;/p&gt;
&lt;p&gt;在 onResponse 方法中，通过调用实例对象 response 的 body（）方法得到请求回复的 body，这个 body 其实就是之前写的 SignInResult 类的一个实例对象，调用我们自己写的 getToken（）方法，就可以得到返回的 json 数据中的 token，然后通过判断 token 是否为空来判断是否登陆成功（判断返回的字符串应该也可以），登陆成功则直接启动下一个 Activity 将 token 保存下来，登陆失败则用 Toast 弹出消息。&lt;/p&gt;
&lt;p&gt;这里需要注意的是，当你发起请求时，Retrofit 会在内部开启一个子线程，后端返回了数据之后再切换回主线程，也就是说 onResponse 和 onFailure 中的方法确实会等待收到返回体后再执行，但 enqueue 后小括号（）之后的语句不会，例如这个 System.out.println，所以如果你的下一步操作需要等待返回体，最好把它塞到 onResonse 中去执行，或者采取一些其他的调整线程的措施。&lt;/p&gt;
&lt;h2 id=&#34;杂谈&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#杂谈&#34;&gt;#&lt;/a&gt; &lt;strong&gt;杂谈&lt;/strong&gt;&lt;/h2&gt;
&lt;h5 id=&#34;注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注解&#34;&gt;#&lt;/a&gt; &lt;strong&gt;注解&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;在前面的 Api 接口当中，loginTest 方法前面及中间有些注解，例如 @POST 和 @Field，还有很多其他注解，可以到网上找关于 Retrofit 注解的教程学习，单纯使用的话就照着 ApiFox 上的填，最好还是去看一下关于注解的教程，看一些 okhttp 的使用教程，注解学明白了写 Retrofit 就算入门了（大概&lt;/p&gt;
&lt;h5 id=&#34;返回数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#返回数据&#34;&gt;#&lt;/a&gt; &lt;strong&gt;返回数据&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;一般都是 json 格式，普通的键值对可以由 json 解码器帮助解码获得，但是有些复杂的 json 数据&lt;/p&gt;
&lt;p&gt;例如（点名批评）：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs json&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;    &lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;        &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;ID&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;85&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;        &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;CreatedAt&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2023-02-28T19:39:20+08:00&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;        &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;UpdatedAt&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2023-02-28T19:39:20+08:00&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;        &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;DeletedAt&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;        &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;11&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;        &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;author_id&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;        &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;日常唠嗑&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;        &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;12345&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;        &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;likes&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;        &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;comment_no&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;    &lt;br&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;   &lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;msg&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;查询到指定的帖子&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;像这样的大肠包小肠的 json 数据，解码器就无能为力了，需要自己在创建用于接收返回数据的类时创建一个 json 字段，或者用强硬地用 String 接收（）&lt;/p&gt;
&lt;h5 id=&#34;依赖库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#依赖库&#34;&gt;#&lt;/a&gt; &lt;strong&gt;依赖库&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;Retrofit 和 json 解码器都需要导入依赖库，我在这贴出来，最新版本应该是 2.9.0&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;implementation &amp;#x27;com.squareup.retrofit2:retrofit:2.9.0&amp;#x27; &lt;br&gt;implementation &amp;#x27;com.squareup.retrofit2:converter-gson:2.9.0&amp;#x27;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;权限&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#权限&#34;&gt;#&lt;/a&gt; &lt;strong&gt;权限&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;Retrofit 需要使用网络，必须要在 AndroidManifest 中 application 之外的部分申请网络访问权限。如：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;uses-permission&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;android:name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;android.permission.INTERNET&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;否则进行网络请求之后每次都只会调用 onFailure 方法。&lt;/p&gt;
&lt;h5 id=&#34;安全声明我不知道这是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安全声明我不知道这是什么&#34;&gt;#&lt;/a&gt; &lt;strong&gt;安全声明（？我不知道这是什么）&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;需要在 res/xml 包下创建一个新的 xml 文件，如：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;?xml version =&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding =&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt; &lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;network-security-config&lt;/span&gt;&amp;gt;&lt;/span&gt;    &lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;base-config&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;cleartextTrafficPermitted&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;network-security-config&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在 AndroidManifest 中 application 之内的部分调用它：&lt;/p&gt;
&lt;p&gt;android:networkSecurityConfig=“@xml/network_config”&lt;/p&gt;
&lt;p&gt;不加的话也是导致只能 onFailure。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
