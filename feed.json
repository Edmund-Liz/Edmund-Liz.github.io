{
    "version": "https://jsonfeed.org/version/1",
    "title": "By Liz",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/05/19/%E5%85%B3%E4%BA%8E%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%B7%A5%E5%85%B7Glide%E7%9A%84%E4%B8%80%E7%82%B9%E4%BB%8B%E7%BB%8D/",
            "url": "http://example.com/2023/05/19/%E5%85%B3%E4%BA%8E%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%B7%A5%E5%85%B7Glide%E7%9A%84%E4%B8%80%E7%82%B9%E4%BB%8B%E7%BB%8D/",
            "title": "关于图片加载工具Glide的一点介绍",
            "date_published": "2023-05-19T11:08:27.000Z",
            "content_html": "<h1 id=\"关于图片加载工具glide的一点介绍\"><a class=\"markdownIt-Anchor\" href=\"#关于图片加载工具glide的一点介绍\">#</a> 关于图片加载工具 Glide 的一点介绍</h1>\n<p>在进行网络相关的代码编写的时候大家肯定都会遇到一些跟图片有关的问题，图片跟普通的信息不一样，是一个文件，接受起来是相当不方便的。那么！！！此时此刻，就需要一个非常牛逼的工具出场了，Glide 可以以各种各样的方法加载图片，堪称 “一行代码解决一切图片加载问题”。Glide 是一款由 Bump Technologies 开发的图片加载框架，要想使用 Glide，首先需要将这个库导入依赖库，搜索 glide 就行，或者在 gradle 文件中 dependencies 里加上一行（要用网络功能，记得声明网络权限）：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs groovy\">implementation <span class=\"hljs-string\">&#x27;com.github.bumptech.glide:glide:4.15.0&#x27;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"简单使用\"><a class=\"markdownIt-Anchor\" href=\"#简单使用\">#</a> 简单使用</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">url</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;xxxxx&quot;</span><br>Glide.with(<span class=\"hljs-built_in\">this</span>)<br>    .load(url)<br>    .into(imageView);<br></code></pre></td></tr></table></figure>\n<p>对于 Glide 加载图片而言，上面这一行代码是最简单，最理想化的情况。</p>\n<p><strong>with</strong> 方法支持传入 Context，Activity，Fragment 类型的参数。也就是说，不管你调用 Glide 的方法在 Activity 中还是在 Fragment 中，你都可以无脑传入一个 this，即使不在这俩项当中，你也可以使用任意传入的 Context 参数，退一万步讲，哪怕你在写这个类时根本忘记了传入 Context，你也可以直接传入 ApplicationContext（不建议）。with 方法传入的参数决定了 Glide 加载图片的生命周期，图片会随着 with 方法传入参数的销毁而销毁。</p>\n<p><strong>load</strong> 方法比 with 方法有更多的重载，可以说 Glide 的神奇之处就在 load 方法中，它支持传入 url 参数（就像上面的代码一样），会访问传入的网址获取图片，也可以直接传入 File 文件，甚至可以传入一个应用资源的 id，总之你随便塞一个可以获取图片的对象进去，它多半可以直接给你加载出来。</p>\n<p><strong>into</strong> 就不用说了，你想给这个图片加载到哪就填哪就行（前提是是个 View 控件）。</p>\n<h2 id=\"占位图\"><a class=\"markdownIt-Anchor\" href=\"#占位图\">#</a> 占位图</h2>\n<p>为什么说上面这一行代码是最简单最理想化的情况呢？当然是因为实际生产中，Glide 当然会有一些奇奇怪怪的问题出现，例如网太卡，图片加载太慢，或者是根本就加载不出来的情况等等，这个时候，就轮到<strong>占位图</strong>出手了。</p>\n<p>占位图分为三种，一种是<strong>图片加载中</strong>的占位图，第二种是<strong>图片加载失败</strong>的占位图，最后一种比较特殊，是当 load 方法所请求的<strong>图片不存在（为 null）<strong>时的占位图，他们对应的方法分别是</strong> placeholder</strong>，<strong>error</strong> 和<strong> fallback</strong></p>\n<h5 id=\"具体使用\"><a class=\"markdownIt-Anchor\" href=\"#具体使用\">#</a> 具体使用</h5>\n<p>以上面的代码为例，我们先来尝试使用 placeholder 方法、</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Glide.with(<span class=\"hljs-built_in\">this</span>)<br>    .load(url)<br>    .placeholder(R.drawable.loading)<br>    .into(imageView);<br></code></pre></td></tr></table></figure>\n<p>相信大家都能发现，在这里传入的参数是<strong> R.drawable.loading</strong>，这是因为 placeholder 方法只支持图片资源 id 参数，原因显而易见，你要加载的图片都还没加载出来，哪有工夫给你再另外加载一个占位图。</p>\n<p>load 方法会返回一个属于 **RequestBuilder<TranscodeType>** 类的对象，placeholder 就是这个类的方法，它同样会返回一个相同类的对象，并不影响后续方法的调用，后续的 error 方法和 fallback 方法也是一样。</p>\n<p>这三种方法在使用上不分先后，而且如果你多个方法一起使用，且需要多次调用 Glide，嫌弃代码重复，还可以手动创建 RequestOptions 对象，通过 apply 方法重复使用它</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">RequestOptions</span> <span class=\"hljs-variable\">options</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RequestOptions</span>()<br>            .placeholder(R.drawable.loading)<br>            .error(R.drawable.error)<br>            .fallback(R.drawable.fallback);<br>Glide.with(<span class=\"hljs-built_in\">this</span>)<br>            .load(url)<br>            .apply(options)<br>            .into(imageView);<br></code></pre></td></tr></table></figure>\n<h2 id=\"图片的大小与比例\"><a class=\"markdownIt-Anchor\" href=\"#图片的大小与比例\">#</a> 图片的大小与比例</h2>\n<p>除了网络问题之外，我们所需要显示的图片和布局控件之间也不可避免地会有一些冲突，例如当我们需要一张正方形 200*200 的图片，用户却上传了一张 1000*1000 像素的图片，或者 200*500 的图片。这时如果你不做任何处理，Glide 就会让你的图片以各种各样诡异的角度显示出来，比如你上传了一张全身美照然后却只显示了你的一张糊图图大脸。</p>\n<p>幸好，Glide 支持指定图片大小和缩略图，当然，作为地表最强（）图片显示工具，即使你不做任何操作，Glide 也不会容许内存浪费问题的出现，它会自动判断 ImageView 的大小然后只加载这么大的图片。当然，这是不够的。</p>\n<h5 id=\"override\"><a class=\"markdownIt-Anchor\" href=\"#override\">#</a> override</h5>\n<p>override 方法要求你提供两个 Int 参数，分别表示所显示图片的宽高像素要求，然后 Glide 就只会将图片加载成你所要求的大小，而不管你的 imageView 有多大</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Glide.with(<span class=\"hljs-built_in\">this</span>)<br>     .load(url)<br>     .apply(options)<br>     .override(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>)<br>     .into(imageView);<br></code></pre></td></tr></table></figure>\n<h5 id=\"centercrop与fitcenter\"><a class=\"markdownIt-Anchor\" href=\"#centercrop与fitcenter\">#</a> CenterCrop（）与 FitCenter（）</h5>\n<p>显然，截取一个固定大小的图片不是我们最想要的，用户上传他的全身美照不是让我们看他的糊图图大脸的，那么，为了用户，对它使用 centerCrop 和 fitCenter 吧！</p>\n<p>CenterCrop 和 FitCenter 这几个单词其实我们见过，对 ImageView 进行 ScaleType 属性设置的时候见过，他们也的确是相对应的。这两个方法不需要传参，只要调用就会起作用。以 centerCrop 举例，塞进 load 和 into 两个方法调用之间去就可以了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Glide.with(<span class=\"hljs-built_in\">this</span>)<br>     .load(url)<br>     .apply(options)<br>     .centerCrop()<br>     .into(imageView);<br></code></pre></td></tr></table></figure>\n<p>centerCrop 和 fitCenter 的区别不大，centerCrop 是将图片缩放到可以完全填充 imageView 的最小尺寸，fitCenter 则是将图片缩放到 imageView 可以完整地显示图片。简而言之，centerCrop 保证 imageView 被填满，但不保证图片全部被显示出来，图片依然有可能被截取掉一部分；fitCenter 保证图片全部显示出来，但不保证 imageView 被填满，布局控件中可能会有未被填充的部分。</p>\n<h2 id=\"图片的动态与静态\"><a class=\"markdownIt-Anchor\" href=\"#图片的动态与静态\">#</a> 图片的动态与静态</h2>\n<p>有的时候我们不仅仅想显示呆板的静态图片，还想显示一些更活泼的 gif 动图（甚至是本地的 mp4 文件），这个时候我就必须质问还在使用 Picasso 的你，什么年代了还在用传统图片显示工具！虽然 Picasso 支持对请求应用 Transformation 来达到各种变换，例如旋转或者一些简单滤镜，但是 Picasso 不支持 gif！而当 Glide 请求得到的图片是一个 Gif 时，Glide 会自动地显示出 Gif 而不需要你做任何额外的操作。当然如果你不想要 Gif，Glide 也会无条件地支持你。你可以使用 asBitmap 来使 gif 强行显示为静态，也就是只显示这张动图的第一帧图片</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\">Glide.with(<span class=\"hljs-built_in\">this</span>)<br>     .load(url)<br>     .apply(options)<br>     .centerCrop()<br>     .asBitmap()<br>     .into(imageView);<br></code></pre></td></tr></table></figure>\n<p>而你非常需要 gif 的话，也可以使用 asGif 来强行显示 gif</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Glide.with(<span class=\"hljs-built_in\">this</span>)<br>     .load(url)<br>     .apply(options)<br>     .centerCrop()<br>     .asGif()<br>     .into(imageView);<br></code></pre></td></tr></table></figure>\n<p>但是如果请求所得到的图片只是一张普通的图片而不是 gif，那么此时 Glide 就会调出 error 方法，显示占位图（所以这个方法没啥用）</p>\n<h2 id=\"图片加载的优先级\"><a class=\"markdownIt-Anchor\" href=\"#图片加载的优先级\">#</a> 图片加载的优先级</h2>\n<p>众所周知，如果我们不需要显示图片，那么我们就不需要显示图片；如果我们需要显示图片，那么我们往往就会需要多次显示图片。但是图片的显示需求有时并不相同，页面边缘的小广告已经出来了，女朋友发给你的照片却还在加载，用户这个时候可能就有点想骂人了。</p>\n<p>那么，轮到 priority 出场了，priority 需要你传入一个指定的枚举类，用以表示你希望这个图片被加载的优先级。这些优先级有：</p>\n<p><strong>Priority.LOW</strong>，<strong>Priority.NORMAL</strong>，<strong>Priority.HIGH</strong>，<strong>Priority.IMMEDIAT</strong> 四种</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Glide.with(<span class=\"hljs-built_in\">this</span>)<br>    .load(url)<br>    .priority(Priority.HIGH)<br>    .into(imageView);<br></code></pre></td></tr></table></figure>\n<p>现在用户也许可以先看见他的女朋友了。“也许” 是因为优先级并不是完全严格遵守的。Glide 将会用他们作为一个准则，尽可能的处理这些请求，但是不能保证所有的图片都会按照所有要求的顺序加载。</p>\n<p>from Liz</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/03/27/Retrofit%E5%85%A5%E9%97%A8/",
            "url": "http://example.com/2023/03/27/Retrofit%E5%85%A5%E9%97%A8/",
            "title": "Retrofit入门",
            "date_published": "2023-03-27T14:57:03.000Z",
            "content_html": "<p>因为原理跟 okhttp 有关就不讲了，这里就只讲一些工作方式，以及一些 bug</p>\n<span id=\"more\"></span>\n<h2 id=\"建立api接口和返回body的类\"><a class=\"markdownIt-Anchor\" href=\"#建立api接口和返回body的类\">#</a> 建立 Api 接口和返回 body 的类</h2>\n<p>首先需要建立一个 Api 接口，在需要用到网络请求时创建一个 Api 接口实例，通过这个实例对象调用方法来实现网络请求，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Api</span> &#123;  <br>    <span class=\"hljs-meta\">@POST(&quot;login&quot;)</span>    <br>    <span class=\"hljs-meta\">@FormUrlEncoded</span>    <br>    Call&lt;SignInResult&gt; <span class=\"hljs-title function_\">loginTest</span>        <br>        <span class=\"hljs-params\">(<span class=\"hljs-meta\">@Field(&quot;username&quot;)</span>String username, <span class=\"hljs-meta\">@Field(&quot;password&quot;)</span>String password)</span>; <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在这几行代码当中，蓝字 Api 显然是随便取的接口名称，下方的 loginTest 方法就是创建 Api 接口实例后需要调用的方法，他的返回体是一个 Retrofit 内部封装的类 Call<Class>类，尖括号中是创建的一个用于接收返回体的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SignInResult</span> &#123;    <br>    <span class=\"hljs-keyword\">private</span> String msg;    <br>    <span class=\"hljs-keyword\">private</span> String token;     <br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getMsg</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> msg;    <br>    &#125;    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setMsg</span><span class=\"hljs-params\">(String msg)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.msg = msg;    <br>    &#125;    <br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getToken</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> token;    <br>    &#125;    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setToken</span><span class=\"hljs-params\">(String token)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.token = token;    <br>    &#125; <br><br></code></pre></td></tr></table></figure>\n<p>这个 SignInResult 用于接收此次 loginTest 请求得到的返回信息，举例登陆成功时，后端所返回的 json 信息是这样的</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br><span class=\"hljs-attr\">&quot;msg&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;登录成功,获得token.&quot;</span><span class=\"hljs-punctuation\">,</span>    \t\t\t\t<span class=\"hljs-attr\">&quot;token&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySWQiOjE2LCJleHAiOjE2Nzk5NzgzNzYsImlhdCI6MTY3NzM4NjM3NiwiaXNzIjoiNDMuMTM4LjYxLjQ5Iiwic3ViIjoi5Y2O5bCP5ZyILiJ9.7TWOTCjPTGihPhn2v0wwwUqdLpF8x4cMm3bfw1wAbHs&quot;</span> <br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n<p>在这里，要接收后端所返回的 “msg” 信息，那么上面所写的 SignInResult 类中就必须有一个对应的 String 字段名为 “msg”，假设 SignInResult 中的字段名不是 “msg” 而是 “message”，那么接收到后端返回的信息之后，就无法得到这个” 登陆成功，获得 token“的字符串，此时调用 getMsg 方法也只会得到 null。</p>\n<p>同理，登陆失败之后，后端返回的信息是这样的</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;msg&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Invalid username or password&quot;</span> <br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n<p>此时依然可以用上面的 SIgnInResult 类接收信息，得到这个 msg 信息，然后通过 getToken 得到了 null 来判断登陆失败。</p>\n<h2 id=\"调用retrofit网络请求\"><a class=\"markdownIt-Anchor\" href=\"#调用retrofit网络请求\">#</a> <strong>调用 Retrofit 网络请求</strong></h2>\n<p>创建完网络请求需要的 Api 接口之后，就可以直接到需要用到这个网络请求的 Activity 当中去敲代码了！</p>\n<p>毫无疑问首先我们要创建 Retrofit 实例和上一步创建的 Api 接口实例，例如</p>\n<p>private Retrofit mRetrofit; private Api mApi;</p>\n<p>然后将这个 Retrofit 实例与 url 绑定</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">mRetrofit=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Retrofit</span>.Builder()<br>    .baseUrl(<span class=\"hljs-string\">&quot;http://43.138.61.49:8899/api/v1/&quot;</span>)                <br>    .addConverterFactory(GsonConverterFactory.create())<br>    .build();<br></code></pre></td></tr></table></figure>\n<p>第一行代码中的 baseUrl 是这个网络请求中需要链接的 url，一般是服务器地址，第二行代码是用于把返回的 json 信息解码为我们创建的 SIgnInResult 类对象。</p>\n<p>然后通过这个 Retrofit 实例给 Api 接口实例赋值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">mApi=mRetrofit.create(Api.class);<br></code></pre></td></tr></table></figure>\n<p>创建完毕之后，首先要确定这次网络请求要发送的信息是什么</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Call&lt;SignInResult&gt; apiResult=mApi.loginTest(usernameEdit.getText().toString(),passwordEdit.getText().toString());<br></code></pre></td></tr></table></figure>\n<p>也就是说，创建一个 Call<SignInResult>实例，给它赋值为前面创建的 Api 接口实例调用方法 loginTest 后得到的返回值，而这里调用 loginTest 需要提供的两个参数是创建 Api 接口时就写了的，用户名和密码。</p>\n<p>然后将这个实例加入需要发送的网络请求的队列当中，enqueue 指异步请求，同步请求为 ex 什么东西（剩下的交给 AS），同步与异步的区别就是同步请求要等待前一个请求得到返回之后才能发送下一个请求，而异步可以像一个服务器的舔狗一样一直发，就算不回也一直发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">apiResult.enqueue(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Callback</span>&lt;SignInResult&gt;() &#123;             <br>    <span class=\"hljs-meta\">@Override</span>             <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onResponse</span>                 <br>        <span class=\"hljs-params\">(Call&lt;SignInResult&gt; call, Response&lt;SignInResult&gt; response)</span> &#123;<br>        String token=response.body().getToken();                        <br>        <span class=\"hljs-keyword\">if</span> (token!=<span class=\"hljs-literal\">null</span>)&#123;<br>            LoginSucceeded();<span class=\"hljs-comment\">//使用这个方法来启动下一个Activity</span><br>            saveToken(token);<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123; Toast.makeText(SignInActivity.<span class=\"hljs-built_in\">this</span>,response.body().getMsg().toString(),Toast.LENGTH_SHORT).show();<br>             &#125;<br>    &#125;<br>    <br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onFailure</span><br>        <span class=\"hljs-params\">(Call&lt;SignInResult&gt; call, Throwable t)</span> &#123;<br>        Toast.makeText(SignInActivity.<span class=\"hljs-built_in\">this</span>,<span class=\"hljs-string\">&quot;登陆失败！&quot;</span>,Toast.LENGTH_SHORT).show();<br>    &#125;  <br>    <br>&#125;);<br>System.out.println(<span class=\"hljs-string\">&quot;XXX&quot;</span>);<br></code></pre></td></tr></table></figure>\n<p>输入 enqueue 之后，AS 会自动弹出两个空的方法，onResponse 和 onFailure，这两个方法中前者是请求成功调用的方法，后者是请求失败调用的方法。这里需要注意的是，登录失败不是请求失败，登陆失败本身也需要请求成功来获得 &quot;Invalid username or password&quot; 这个返回数据。</p>\n<p>在 onResponse 方法中，通过调用实例对象 response 的 body（）方法得到请求回复的 body，这个 body 其实就是之前写的 SignInResult 类的一个实例对象，调用我们自己写的 getToken（）方法，就可以得到返回的 json 数据中的 token，然后通过判断 token 是否为空来判断是否登陆成功（判断返回的字符串应该也可以），登陆成功则直接启动下一个 Activity 将 token 保存下来，登陆失败则用 Toast 弹出消息。</p>\n<p>这里需要注意的是，当你发起请求时，Retrofit 会在内部开启一个子线程，后端返回了数据之后再切换回主线程，也就是说 onResponse 和 onFailure 中的方法确实会等待收到返回体后再执行，但 enqueue 后小括号（）之后的语句不会，例如这个 System.out.println，所以如果你的下一步操作需要等待返回体，最好把它塞到 onResonse 中去执行，或者采取一些其他的调整线程的措施。</p>\n<h2 id=\"杂谈\"><a class=\"markdownIt-Anchor\" href=\"#杂谈\">#</a> <strong>杂谈</strong></h2>\n<h5 id=\"注解\"><a class=\"markdownIt-Anchor\" href=\"#注解\">#</a> <strong>注解</strong></h5>\n<p>在前面的 Api 接口当中，loginTest 方法前面及中间有些注解，例如 @POST 和 @Field，还有很多其他注解，可以到网上找关于 Retrofit 注解的教程学习，单纯使用的话就照着 ApiFox 上的填，最好还是去看一下关于注解的教程，看一些 okhttp 的使用教程，注解学明白了写 Retrofit 就算入门了（大概</p>\n<h5 id=\"返回数据\"><a class=\"markdownIt-Anchor\" href=\"#返回数据\">#</a> <strong>返回数据</strong></h5>\n<p>一般都是 json 格式，普通的键值对可以由 json 解码器帮助解码获得，但是有些复杂的 json 数据</p>\n<p>例如（点名批评）：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-attr\">&quot;code&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">200</span><span class=\"hljs-punctuation\">,</span>    <br><span class=\"hljs-attr\">&quot;data&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span>        <br>    <span class=\"hljs-attr\">&quot;ID&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">85</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;CreatedAt&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;2023-02-28T19:39:20+08:00&quot;</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;UpdatedAt&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;2023-02-28T19:39:20+08:00&quot;</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;DeletedAt&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">null</span></span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;title&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;11&quot;</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;author_id&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;日常唠嗑&quot;</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;content&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;12345&quot;</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;likes&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;comment_no&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span>    <br><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span>   <br><span class=\"hljs-attr\">&quot;msg&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;查询到指定的帖子&quot;</span><br></code></pre></td></tr></table></figure>\n<p>像这样的大肠包小肠的 json 数据，解码器就无能为力了，需要自己在创建用于接收返回数据的类时创建一个 json 字段，或者用强硬地用 String 接收（）</p>\n<h5 id=\"依赖库\"><a class=\"markdownIt-Anchor\" href=\"#依赖库\">#</a> <strong>依赖库</strong></h5>\n<p>Retrofit 和 json 解码器都需要导入依赖库，我在这贴出来，最新版本应该是 2.9.0</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">implementation &#x27;com.squareup.retrofit2:retrofit:2.9.0&#x27; <br>implementation &#x27;com.squareup.retrofit2:converter-gson:2.9.0&#x27;<br></code></pre></td></tr></table></figure>\n<h5 id=\"权限\"><a class=\"markdownIt-Anchor\" href=\"#权限\">#</a> <strong>权限</strong></h5>\n<p>Retrofit 需要使用网络，必须要在 AndroidManifest 中 application 之外的部分申请网络访问权限。如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.INTERNET&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n<p>否则进行网络请求之后每次都只会调用 onFailure 方法。</p>\n<h5 id=\"安全声明我不知道这是什么\"><a class=\"markdownIt-Anchor\" href=\"#安全声明我不知道这是什么\">#</a> <strong>安全声明（？我不知道这是什么）</strong></h5>\n<p>需要在 res/xml 包下创建一个新的 xml 文件，如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version =<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding =<span class=\"hljs-string\">&quot;utf-8&quot;</span>?&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">network-security-config</span>&gt;</span>    <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">base-config</span> <span class=\"hljs-attr\">cleartextTrafficPermitted</span>=<span class=\"hljs-string\">&quot;true&quot;</span> /&gt;</span> <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">network-security-config</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>然后在 AndroidManifest 中 application 之内的部分调用它：</p>\n<p>android:networkSecurityConfig=“@xml/network_config”</p>\n<p>不加的话也是导致只能 onFailure。</p>\n",
            "tags": []
        }
    ]
}