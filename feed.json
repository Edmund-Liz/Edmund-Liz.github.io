{
    "version": "https://jsonfeed.org/version/1",
    "title": "By Liz",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/03/27/Retrofit%E5%85%A5%E9%97%A8/",
            "url": "http://example.com/2023/03/27/Retrofit%E5%85%A5%E9%97%A8/",
            "title": "Retrofit入门",
            "date_published": "2023-03-27T14:57:03.000Z",
            "content_html": "<p>因为原理跟 okhttp 有关就不讲了，这里就只讲一些工作方式，以及一些 bug</p>\n<span id=\"more\"></span>\n<h2 id=\"建立api接口和返回body的类\"><a class=\"markdownIt-Anchor\" href=\"#建立api接口和返回body的类\">#</a> 建立 Api 接口和返回 body 的类</h2>\n<p>首先需要建立一个 Api 接口，在需要用到网络请求时创建一个 Api 接口实例，通过这个实例对象调用方法来实现网络请求，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Api</span> &#123;  <br>    <span class=\"hljs-meta\">@POST(&quot;login&quot;)</span>    <br>    <span class=\"hljs-meta\">@FormUrlEncoded</span>    <br>    Call&lt;SignInResult&gt; <span class=\"hljs-title function_\">loginTest</span>        <br>        <span class=\"hljs-params\">(<span class=\"hljs-meta\">@Field(&quot;username&quot;)</span>String username, <span class=\"hljs-meta\">@Field(&quot;password&quot;)</span>String password)</span>; <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在这几行代码当中，蓝字 Api 显然是随便取的接口名称，下方的 loginTest 方法就是创建 Api 接口实例后需要调用的方法，他的返回体是一个 Retrofit 内部封装的类 Call<Class>类，尖括号中是创建的一个用于接收返回体的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SignInResult</span> &#123;    <br>    <span class=\"hljs-keyword\">private</span> String msg;    <br>    <span class=\"hljs-keyword\">private</span> String token;     <br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getMsg</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> msg;    <br>    &#125;    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setMsg</span><span class=\"hljs-params\">(String msg)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.msg = msg;    <br>    &#125;    <br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getToken</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> token;    <br>    &#125;    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setToken</span><span class=\"hljs-params\">(String token)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.token = token;    <br>    &#125; <br><br></code></pre></td></tr></table></figure>\n<p>这个 SignInResult 用于接收此次 loginTest 请求得到的返回信息，举例登陆成功时，后端所返回的 json 信息是这样的</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br><span class=\"hljs-attr\">&quot;msg&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;登录成功,获得token.&quot;</span><span class=\"hljs-punctuation\">,</span>    \t\t\t\t<span class=\"hljs-attr\">&quot;token&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySWQiOjE2LCJleHAiOjE2Nzk5NzgzNzYsImlhdCI6MTY3NzM4NjM3NiwiaXNzIjoiNDMuMTM4LjYxLjQ5Iiwic3ViIjoi5Y2O5bCP5ZyILiJ9.7TWOTCjPTGihPhn2v0wwwUqdLpF8x4cMm3bfw1wAbHs&quot;</span> <br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n<p>在这里，要接收后端所返回的 “msg” 信息，那么上面所写的 SignInResult 类中就必须有一个对应的 String 字段名为 “msg”，假设 SignInResult 中的字段名不是 “msg” 而是 “message”，那么接收到后端返回的信息之后，就无法得到这个” 登陆成功，获得 token“的字符串，此时调用 getMsg 方法也只会得到 null。</p>\n<p>同理，登陆失败之后，后端返回的信息是这样的</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;msg&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Invalid username or password&quot;</span> <br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n<p>此时依然可以用上面的 SIgnInResult 类接收信息，得到这个 msg 信息，然后通过 getToken 得到了 null 来判断登陆失败。</p>\n<h2 id=\"调用retrofit网络请求\"><a class=\"markdownIt-Anchor\" href=\"#调用retrofit网络请求\">#</a> <strong>调用 Retrofit 网络请求</strong></h2>\n<p>创建完网络请求需要的 Api 接口之后，就可以直接到需要用到这个网络请求的 Activity 当中去敲代码了！</p>\n<p>毫无疑问首先我们要创建 Retrofit 实例和上一步创建的 Api 接口实例，例如</p>\n<p>private Retrofit mRetrofit; private Api mApi;</p>\n<p>然后将这个 Retrofit 实例与 url 绑定</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">mRetrofit=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Retrofit</span>.Builder()<br>    .baseUrl(<span class=\"hljs-string\">&quot;http://43.138.61.49:8899/api/v1/&quot;</span>)                <br>    .addConverterFactory(GsonConverterFactory.create())<br>    .build();<br></code></pre></td></tr></table></figure>\n<p>第一行代码中的 baseUrl 是这个网络请求中需要链接的 url，一般是服务器地址，第二行代码是用于把返回的 json 信息解码为我们创建的 SIgnInResult 类对象。</p>\n<p>然后通过这个 Retrofit 实例给 Api 接口实例赋值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">mApi=mRetrofit.create(Api.class);<br></code></pre></td></tr></table></figure>\n<p>创建完毕之后，首先要确定这次网络请求要发送的信息是什么</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Call&lt;SignInResult&gt; apiResult=mApi.loginTest(usernameEdit.getText().toString(),passwordEdit.getText().toString());<br></code></pre></td></tr></table></figure>\n<p>也就是说，创建一个 Call<SignInResult>实例，给它赋值为前面创建的 Api 接口实例调用方法 loginTest 后得到的返回值，而这里调用 loginTest 需要提供的两个参数是创建 Api 接口时就写了的，用户名和密码。</p>\n<p>然后将这个实例加入需要发送的网络请求的队列当中，enqueue 指异步请求，同步请求为 ex 什么东西（剩下的交给 AS），同步与异步的区别就是同步请求要等待前一个请求得到返回之后才能发送下一个请求，而异步可以像一个服务器的舔狗一样一直发，就算不回也一直发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">apiResult.enqueue(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Callback</span>&lt;SignInResult&gt;() &#123;             <br>    <span class=\"hljs-meta\">@Override</span>             <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onResponse</span>                 <br>        <span class=\"hljs-params\">(Call&lt;SignInResult&gt; call, Response&lt;SignInResult&gt; response)</span> &#123;<br>        String token=response.body().getToken();                        <br>        <span class=\"hljs-keyword\">if</span> (token!=<span class=\"hljs-literal\">null</span>)&#123;<br>            LoginSucceeded();<span class=\"hljs-comment\">//使用这个方法来启动下一个Activity</span><br>            saveToken(token);<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123; Toast.makeText(SignInActivity.<span class=\"hljs-built_in\">this</span>,response.body().getMsg().toString(),Toast.LENGTH_SHORT).show();<br>             &#125;<br>    &#125;<br>    <br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onFailure</span><br>        <span class=\"hljs-params\">(Call&lt;SignInResult&gt; call, Throwable t)</span> &#123;<br>        Toast.makeText(SignInActivity.<span class=\"hljs-built_in\">this</span>,<span class=\"hljs-string\">&quot;登陆失败！&quot;</span>,Toast.LENGTH_SHORT).show();<br>    &#125;  <br>    <br>&#125;);<br>System.out.println(<span class=\"hljs-string\">&quot;XXX&quot;</span>);<br></code></pre></td></tr></table></figure>\n<p>输入 enqueue 之后，AS 会自动弹出两个空的方法，onResponse 和 onFailure，这两个方法中前者是请求成功调用的方法，后者是请求失败调用的方法。这里需要注意的是，登录失败不是请求失败，登陆失败本身也需要请求成功来获得 &quot;Invalid username or password&quot; 这个返回数据。</p>\n<p>在 onResponse 方法中，通过调用实例对象 response 的 body（）方法得到请求回复的 body，这个 body 其实就是之前写的 SignInResult 类的一个实例对象，调用我们自己写的 getToken（）方法，就可以得到返回的 json 数据中的 token，然后通过判断 token 是否为空来判断是否登陆成功（判断返回的字符串应该也可以），登陆成功则直接启动下一个 Activity 将 token 保存下来，登陆失败则用 Toast 弹出消息。</p>\n<p>这里需要注意的是，当你发起请求时，Retrofit 会在内部开启一个子线程，后端返回了数据之后再切换回主线程，也就是说 onResponse 和 onFailure 中的方法确实会等待收到返回体后再执行，但 enqueue 后小括号（）之后的语句不会，例如这个 System.out.println，所以如果你的下一步操作需要等待返回体，最好把它塞到 onResonse 中去执行，或者采取一些其他的调整线程的措施。</p>\n<h2 id=\"杂谈\"><a class=\"markdownIt-Anchor\" href=\"#杂谈\">#</a> <strong>杂谈</strong></h2>\n<h5 id=\"注解\"><a class=\"markdownIt-Anchor\" href=\"#注解\">#</a> <strong>注解</strong></h5>\n<p>在前面的 Api 接口当中，loginTest 方法前面及中间有些注解，例如 @POST 和 @Field，还有很多其他注解，可以到网上找关于 Retrofit 注解的教程学习，单纯使用的话就照着 ApiFox 上的填，最好还是去看一下关于注解的教程，看一些 okhttp 的使用教程，注解学明白了写 Retrofit 就算入门了（大概</p>\n<h5 id=\"返回数据\"><a class=\"markdownIt-Anchor\" href=\"#返回数据\">#</a> <strong>返回数据</strong></h5>\n<p>一般都是 json 格式，普通的键值对可以由 json 解码器帮助解码获得，但是有些复杂的 json 数据</p>\n<p>例如（点名批评）：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-attr\">&quot;code&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">200</span><span class=\"hljs-punctuation\">,</span>    <br><span class=\"hljs-attr\">&quot;data&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span>        <br>    <span class=\"hljs-attr\">&quot;ID&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">85</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;CreatedAt&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;2023-02-28T19:39:20+08:00&quot;</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;UpdatedAt&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;2023-02-28T19:39:20+08:00&quot;</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;DeletedAt&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">null</span></span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;title&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;11&quot;</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;author_id&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;日常唠嗑&quot;</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;content&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;12345&quot;</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;likes&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;comment_no&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span>    <br><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span>   <br><span class=\"hljs-attr\">&quot;msg&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;查询到指定的帖子&quot;</span><br></code></pre></td></tr></table></figure>\n<p>像这样的大肠包小肠的 json 数据，解码器就无能为力了，需要自己在创建用于接收返回数据的类时创建一个 json 字段，或者用强硬地用 String 接收（）</p>\n<h5 id=\"依赖库\"><a class=\"markdownIt-Anchor\" href=\"#依赖库\">#</a> <strong>依赖库</strong></h5>\n<p>Retrofit 和 json 解码器都需要导入依赖库，我在这贴出来，最新版本应该是 2.9.0</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">implementation &#x27;com.squareup.retrofit2:retrofit:2.9.0&#x27; <br>implementation &#x27;com.squareup.retrofit2:converter-gson:2.9.0&#x27;<br></code></pre></td></tr></table></figure>\n<h5 id=\"权限\"><a class=\"markdownIt-Anchor\" href=\"#权限\">#</a> <strong>权限</strong></h5>\n<p>Retrofit 需要使用网络，必须要在 AndroidManifest 中 application 之外的部分申请网络访问权限。如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.INTERNET&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n<p>否则进行网络请求之后每次都只会调用 onFailure 方法。</p>\n<h5 id=\"安全声明我不知道这是什么\"><a class=\"markdownIt-Anchor\" href=\"#安全声明我不知道这是什么\">#</a> <strong>安全声明（？我不知道这是什么）</strong></h5>\n<p>需要在 res/xml 包下创建一个新的 xml 文件，如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version =<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding =<span class=\"hljs-string\">&quot;utf-8&quot;</span>?&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">network-security-config</span>&gt;</span>    <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">base-config</span> <span class=\"hljs-attr\">cleartextTrafficPermitted</span>=<span class=\"hljs-string\">&quot;true&quot;</span> /&gt;</span> <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">network-security-config</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>然后在 AndroidManifest 中 application 之内的部分调用它：</p>\n<p>android:networkSecurityConfig=“@xml/network_config”</p>\n<p>不加的话也是导致只能 onFailure。</p>\n",
            "tags": []
        }
    ]
}