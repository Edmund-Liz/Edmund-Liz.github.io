{
    "version": "https://jsonfeed.org/version/1",
    "title": "By Liz",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/12/02/%E7%B1%BB%EF%BC%8C%E5%AF%B9%E8%B1%A1%EF%BC%8C%E7%BB%A7%E6%89%BF%EF%BC%8C%E9%87%8D%E8%BD%BD%E5%92%8C%E4%BF%AE%E9%A5%B0%E7%AC%A6%E2%80%94%E2%80%94Java%E8%AF%AD%E6%B3%95%E7%89%B9%E6%80%A7/",
            "url": "http://example.com/2023/12/02/%E7%B1%BB%EF%BC%8C%E5%AF%B9%E8%B1%A1%EF%BC%8C%E7%BB%A7%E6%89%BF%EF%BC%8C%E9%87%8D%E8%BD%BD%E5%92%8C%E4%BF%AE%E9%A5%B0%E7%AC%A6%E2%80%94%E2%80%94Java%E8%AF%AD%E6%B3%95%E7%89%B9%E6%80%A7/",
            "title": "",
            "date_published": "2023-12-02T03:43:52.464Z",
            "content_html": "<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">title: 类，对象，继承，重载和修饰符——Java语法特性<br>date: 2023/12/2<br>tags:<br></code></pre></td></tr></table></figure>\n<h2 id=\"类和对象\"><a class=\"markdownIt-Anchor\" href=\"#类和对象\">#</a> 类和对象</h2>\n<p>我们从 “白马非马 “这句话开始，大多数人一眼认为荒谬的原因是，他们是这样理解的：白马（对象）非马（类），这当然是错误的，但这句话实际的意思是：白马（类）非马（类）。</p>\n<p>我们把这句话转化成 Java 代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//假设有两个这样的类</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Horse</span>();<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WhiteHorse</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Horse</span>();<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//然后在某个方法里创建两个实例</span><br>Horse a=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Horse</span>();<br>WhiteHorse b=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WhiteHorse</span>();<br></code></pre></td></tr></table></figure>\n<p>白马（对象）非马（类）这句话就成了这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">(b <span class=\"hljs-keyword\">instanceof</span> Horse)==<span class=\"hljs-literal\">false</span>;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>instanceof 是 Java 的一个二元操作符，类似于 ==，&gt;，&lt; 等操作符。</p>\n<p>instanceof 是 Java 的保留关键字。它的作用是测试它左边的对象是否是它右边的类的实例，返回 boolean 的数据类型。</p>\n</blockquote>\n<p>这个判断是错误的，具体的原因我们后面再讲， <code>==</code>  左边的式子返回的布尔值将会是 true，并不等于 <code>==</code>  右边的 false，这与 “现实中一眼看上去的白马非马这四个字是错误的” 这件事相同。</p>\n<p>但是实际上呢，白马非马这句话指的是 class Horse 不等于 class WhiteHorse。这里我没法给出一个代码来表示他，无论是在现实中还是 Java 语言中，如果两个概念相同，那么他们只是同一个概念的不同名字而已，而在 Java 中，如果两个类的持有字段，方法完全相同，那你干嘛要创建两个不同的类？</p>\n<h2 id=\"继承\"><a class=\"markdownIt-Anchor\" href=\"#继承\">#</a> 继承</h2>\n<p>回到这句话：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\">(b <span class=\"hljs-keyword\">instanceof</span> Horse)==<span class=\"hljs-literal\">false</span>;<br></code></pre></td></tr></table></figure>\n<p>为什么 <code>==</code>  右边会返回 true 呢？b 在初始化的时候使用的明明是 <code>new WhiteHorse();</code>  而不是 <code>new Horse();</code>  这是因为 instanceof 操作符实际上和现实生活中的朴素逻辑是一致的，<strong>子类的对象一定是父类的实例，父类的对象不一定是子类的实例</strong>（实例和对象其实是差不多的意思）。在创建 WhiteHorse 类的时候，类名后面使用 extends 使得 WhiteHorse 成为了 Horse 的子类，二者的关系就被称之为继承。子类可以调用父类所有<strong>非 private</strong>（修饰符）的方法。</p>\n<h3 id=\"为什么需要继承\"><a class=\"markdownIt-Anchor\" href=\"#为什么需要继承\">#</a> 为什么需要继承？</h3>\n<p>假如你现在要编写两个类，黑马和白马。假设他们的代码长这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BlackHorse</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> age)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">BlackHorse</span><span class=\"hljs-params\">(String name, <span class=\"hljs-type\">int</span> age)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name=name;<br>        <span class=\"hljs-built_in\">this</span>.age=age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">introduce</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;A &quot;</span>+age+<span class=\"hljs-string\">&quot;-year-old black horse named &quot;</span>+name);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后编写白马的时候再写一遍</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WhiteHorse</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> age)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">WhiteHorse</span><span class=\"hljs-params\">(String name, <span class=\"hljs-type\">int</span> age)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name=name;<br>        <span class=\"hljs-built_in\">this</span>.age=age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">introduce</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;A &quot;</span>+age+<span class=\"hljs-string\">&quot;-year-old white horse named &quot;</span>+name);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在实际生产当中，有许多类之间有大量的相同相似方法和完全不同的方法，重复编写和查找修改是一件枯燥无意义且生产力低下的事情，那么此时提高代码的复用性就非常重要。</p>\n<p>那么我们可以写一个父类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Horse</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Horse</span><span class=\"hljs-params\">(String name, <span class=\"hljs-type\">int</span> age)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> age)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后写两个子类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WhiteHorse</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Horse</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">WhiteHorse</span><span class=\"hljs-params\">(String name,<span class=\"hljs-type\">int</span> age)</span> &#123;<br>        <span class=\"hljs-built_in\">super</span>(name,age);<span class=\"hljs-comment\">//注意此处的super</span><br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">introduce</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;A &quot;</span>+<span class=\"hljs-built_in\">super</span>.getAge()+<span class=\"hljs-string\">&quot;-year-old white horse named &quot;</span>+<span class=\"hljs-built_in\">super</span>.getName());<br>    &#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BlackHorse</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Horse</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">BlackHorse</span><span class=\"hljs-params\">(String name,<span class=\"hljs-type\">int</span> age)</span> &#123;<br>        <span class=\"hljs-built_in\">super</span>(name,age);<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">introduce</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;A &quot;</span>+<span class=\"hljs-built_in\">super</span>.getAge()+<span class=\"hljs-string\">&quot;-year-old black horse named &quot;</span>+<span class=\"hljs-built_in\">super</span>.getName());<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>这样就达到了提高代码复用性的目的。</p>\n<h2 id=\"重载\"><a class=\"markdownIt-Anchor\" href=\"#重载\">#</a> 重载</h2>\n<p>重载是指在同一个类当中，多个方法名字相同，而参数不同。实际上这种特性的作用主要是简化代码，或者说提高代码的可读性，具体没什么好说的，能用就用。给个示例吧：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HorseSeller</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> Horse horse;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">introduceHorse</span><span class=\"hljs-params\">(WhiteHorse horse)</span>&#123;<br>        horse.introduce();<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">introduceHorse</span><span class=\"hljs-params\">(BlackHorse horse)</span>&#123;<br>        horse.introduce();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>编译器依靠方法签名来分辨不同的方法，签名由方法名 + 形参的有序列表构成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fun</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num,String string)</span>;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fun</span><span class=\"hljs-params\">(String string,<span class=\"hljs-type\">int</span> num)</span>;<br><span class=\"hljs-comment\">//这被认为是两个不同的方法</span><br></code></pre></td></tr></table></figure>\n<p>需要注意的是方法签名并不包括返回值类型。即两个参数相同的方法即使返回值不同也不被允许同时存在于一个类中。这个的原因是调用方法时返回值可能会被舍弃。我们来看一段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">()</span>;<span class=\"hljs-comment\">//fun1</span><br><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">()</span>;<span class=\"hljs-comment\">//fun2</span><br><span class=\"hljs-comment\">//看上去是两个很不同的方法</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>&#123;<br>    <span class=\"hljs-type\">int</span> num=get();<span class=\"hljs-comment\">//显然需要调用fun1</span><br>    String s=get();<span class=\"hljs-comment\">//显然需要调用fun2</span><br>   \t<br>    get();<span class=\"hljs-comment\">//那么现在呢？</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>当返回值被赋值给某个变量时，编译器可以很轻易地找到应该调用的方法，但问题在于，不是所有的返回值都会被使用，当返回值被舍弃时，不同的返回值无法区分不同的方法。</p>\n<h3 id=\"重载与重写\"><a class=\"markdownIt-Anchor\" href=\"#重载与重写\">#</a> 重载与重写</h3>\n<p>与重载类似的是，子类可以重写父类的方法。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">father</span>&#123;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fun</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;father&quot;</span>);<br>&#125;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">son</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">father</span>()&#123;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fun</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;son&quot;</span>);<br>&#125;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        Son son=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Son</span>();<br>        son.fun();<span class=\"hljs-comment\">//将输出&quot;son&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>同为重名方法，重写与重载的区别主要有三点。</p>\n<ol>\n<li>\n<p>重写要求方法的签名完全相同，重载要求方法的签名不同。</p>\n</li>\n<li>\n<p>重写是不同类中，子类覆盖了父类的方法。子类实例只能调用重写之后的方法，父类实例只能调用重写之前的方法。同一类型的实例只能调用同一种方法。重载是同一类中多个方法共存，同一实例可以通过传入不同参数，调用不同种的方法。</p>\n</li>\n<li>\n<p>重写对方法的要求更加严格，子类重写方法的返回值必须和父类同签名方法的返回值相同，或为该方法返回值的子类，在低版本的 Java 中要求必须相同</p>\n<blockquote>\n<p>与方法对应，子类和父类的变量也具有类似重写的机制。子类和父类可以具有两个同名变量，这两个变量之间相互独立（即使变量名的前缀完全一致，他们依然可以持有不同的值）。</p>\n<p>你可以在父类中定义一个 <code>int a</code> ，然后在子类中再定义一个 <code>int a</code> ，此时子类持有两个不同的 a，分别称为 <code>父类a</code>  和 <code>子类a</code> 。</p>\n<p>如果子类未重写父类的 getter 和 setter 方法，任何地方使用的 getter 和 setter 方法都将默认调用父类的 getter 和 setter，操作 <code>父类a</code> 。</p>\n<p>在子类中的所有代码中， <code>super.a</code>  则为 <code>父类a</code> ， <code>a</code>  或 <code>this.a</code>  则为 <code>子类a</code> （存在形参名为 <code>a</code>  的方法中 <code>a</code>  仍为形参）。</p>\n<p>在其他类当中，只能调用方法来操作 <code>父类a</code> ，无法直接得到 <code>父类a</code> ， <code>son.a</code>  只会是 <code>子类a</code> ，即使 <code>子类a</code>  无法访问也只会报错而不是转向 <code>父类a</code> 。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"修饰符\"><a class=\"markdownIt-Anchor\" href=\"#修饰符\">#</a> 修饰符</h2>\n<p>Java 的修饰符用于定义类，方法，和变量。修饰符分为两类：访问修饰符和非访问修饰符。</p>\n<h3 id=\"访问修饰符\"><a class=\"markdownIt-Anchor\" href=\"#访问修饰符\">#</a> 访问修饰符</h3>\n<p>访问修饰符可以用于修饰类，方法，变量，在一共有四种不同的访问级别，分别对应三种修饰符和无修饰符，权限由无限制到最严格依次为：</p>\n<h6 id=\"public\"><a class=\"markdownIt-Anchor\" href=\"#public\">#</a> public：</h6>\n<p>可以被同一包内的任何类访问，其他包内的类使用 import 导入后访问。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> A;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Horse</span>&#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fun</span><span class=\"hljs-params\">()</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">package</span> A;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test1</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span>&#123;<br>        Horse horse=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Horse</span>();<br>        horse.fun();<span class=\"hljs-comment\">//OK</span><br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">package</span> B;<br><span class=\"hljs-keyword\">import</span> A.Horse;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test2</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span>&#123;<br>        Horse horse=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Horse</span>();<br>        horse.fun();<span class=\"hljs-comment\">//OK</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h6 id=\"protected\"><a class=\"markdownIt-Anchor\" href=\"#protected\">#</a> protected：</h6>\n<p>不能用于修饰外部类，因为 protected 的类将无法被其他包下的类继承：父类被继承的前提是可被访问，被 protected 修饰的父类可被访问的前提是被继承，二者互为前提。</p>\n<p>protect 的访问规则比较复杂，主要有三点：</p>\n<ol>\n<li>\n<p>与父类同一包的任何类，能通过任何父类或子类实例访问。</p>\n</li>\n<li>\n<p>与父类不同包的任何非子类不能访问。</p>\n</li>\n<li>\n<p>与父类不同包的子类，只能通过本子类实例访问，不能通过父类实例或其他子类实例访问。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> A;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Father</span>&#123;<br>\t<span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fun</span><span class=\"hljs-params\">()</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">package</span> A;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Son1</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Father</span>&#123;&#125;<br><br><span class=\"hljs-keyword\">package</span> A;<br><span class=\"hljs-keyword\">import</span> B.Son2;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test1</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span>&#123;<br>        Father father=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Father</span>();<br>        Son1 son1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Son1</span>();<br>        Son2 son2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Son2</span>();<br>        father.fun();<br>        son1.fun();<br>        son2.fun();<span class=\"hljs-comment\">//同一包内任意访问</span><br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">package</span> B;<br><span class=\"hljs-keyword\">import</span> A.Father;<br><span class=\"hljs-keyword\">import</span> A.Son1;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Son2</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Father</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span>&#123;<br>        Father father=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Father</span>();<br>        Son1 son1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Son1</span>();<br>        Son2 son2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Son2</span>();<br>        Son3 son3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Son3</span>();<br>        father.fun();<span class=\"hljs-comment\">//报错</span><br>        son1.fun();<span class=\"hljs-comment\">//报错</span><br>        son2.fun();\t\t\t<span class=\"hljs-comment\">//通过</span><br>        son3.fun();<span class=\"hljs-comment\">//报错</span><br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">package</span> B;<br><span class=\"hljs-keyword\">import</span> A.Father;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Son3</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Father</span>&#123;&#125;<br><br><span class=\"hljs-keyword\">package</span> B;<br><span class=\"hljs-keyword\">import</span> A.Father;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test2</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span>&#123;<br>        Father father=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Father</span>();<br>        Son1 son1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Son1</span>();<br>        Son2 son2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Son2</span>();<br>        Son3 son3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Son3</span>();<br>        <span class=\"hljs-comment\">//下面四行没有一行能跑的</span><br>        father.fun();<br>        son1.fun();<br>        son2.fun();<br>        son3.fun();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h6 id=\"无修饰符\"><a class=\"markdownIt-Anchor\" href=\"#无修饰符\">#</a> 无修饰符：</h6>\n<p>可以被同一包内的任何类访问，其他包内的类无法访问。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> A;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Horse</span>&#123;<br>\t<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fun</span><span class=\"hljs-params\">()</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">package</span> A;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test1</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span>&#123;<br>        Horse horse=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Horse</span>();<br>        horse.fun();<span class=\"hljs-comment\">//OK</span><br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">package</span> B;<br><span class=\"hljs-keyword\">import</span> A.Horse;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test2</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span>&#123;<br>        Horse horse=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Horse</span>();<br>        horse.fun();<span class=\"hljs-comment\">//ERROR</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h6 id=\"private\"><a class=\"markdownIt-Anchor\" href=\"#private\">#</a> private:</h6>\n<p>不能用于修饰外部类，private 的类毫无意义。只允许被本类访问。</p>\n<h6 id=\"重写中的访问修饰符\"><a class=\"markdownIt-Anchor\" href=\"#重写中的访问修饰符\">#</a> 重写中的访问修饰符：</h6>\n<p>除了 private 方法无法重写外，子类重写的父类方法，必须具有和父类相同或比父类可用范围更大的访问修饰符。</p>\n<blockquote>\n<h4 id=\"为什么是privategettersetter而不是public\"><a class=\"markdownIt-Anchor\" href=\"#为什么是privategettersetter而不是public\">#</a> 为什么是 private+getter+setter 而不是 public？</h4>\n<p>在编写一个新的类时，教程往往指示你选择将变量使用 private 修饰，然后编写 getter 和 setter 方法，并给予 public 权限，而不是直接将变量使用 public 修饰。为什么要这样？大多数教程会告诉你，这是为了遵守 Java 的 “封装” 规则，但是实际上，每一个学 Java 的人都在说 “封装”，但是其中的大多数人根本不懂得 “封装”，用这个词来解释就好像说 “祖宗之法不可变” 一样。事实就是，如果你真的只是给变量一个 private，然后用快捷键生成两个 public 的 getter 和 setter，那么使用 public 在工程效果上是完全一致的。那么为什么不使用更加简单的 public？</p>\n<p>这有很多方面的原因：</p>\n<p>如果你需要检查一个变量的调用，就可以在 getter 中输出，或者断点调试。</p>\n<p>或者你需要控制一个变量的范围，例如一个 int score，成绩只可能在 0~100 之间，但用户在输入时可能输入其他的值，你就需要在 setter 中增加判断，抛出异常或者其他操作</p>\n<p>读写分离，你可能想限制该变量的写 s 入权限，将 setter 方法和 getter 方法设置为不同的写入权限。</p>\n<p>再如果，你的工程项目中需要使用一些项目框架，例如 Spring，有些框架的规范规定你必须给变量创建 getter 和 setter 方法，这利于对变量管理同一化，而不是将 public 和 private+getter+setter 分开管理。</p>\n<p>对于自动生成的 getter 和 setter，使用 public 在效果上与之没有任何区别，但我仍然建议你使用 private+getter+setter，仅仅为了建立习惯。</p>\n</blockquote>\n<h3 id=\"非访问修饰符\"><a class=\"markdownIt-Anchor\" href=\"#非访问修饰符\">#</a> 非访问修饰符</h3>\n<p>非访问修饰符可以用于修饰类，方法，变量。严格地讲非访问控制修饰符有六种，但是其中有三种用于线程相关，这里只讲前三种：static，final，abstract。</p>\n<h6 id=\"static\"><a class=\"markdownIt-Anchor\" href=\"#static\">#</a> static</h6>\n<p>只能用于修饰类持有的方法和变量。以是否是 static 为区分，方法和类有一些别称，是 static 的称为类方法，类变量，不是的称为成员方法，成员变量。在满足访问权限的前提下，类方法和变量都可以直接通过类调用。</p>\n<p>类方法中无法使用成员变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> num1;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> num2;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fun</span><span class=\"hljs-params\">()</span>&#123;<br>  <span class=\"hljs-comment\">//\tsout(num1);//这里不注释掉会报错</span><br>    \tsout(num2);<span class=\"hljs-comment\">//ok</span><br>\t\tsout(<span class=\"hljs-string\">&quot;static fun&quot;</span>);<br>&#125;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test</span>&#123;<br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        A a=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">A</span>();<br>        a.fun();<span class=\"hljs-comment\">//ok</span><br>         <br>        A.fun();<span class=\"hljs-comment\">//ok</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>static 的作用在于，标识这个变量，使得这个变量成为整个类共享的变量。也就是在程序的同一位置，任意一个该类的实例，或者直接使用类名去调用这个 static 变量都将得到同样的结果。</p>\n<h6 id=\"final\"><a class=\"markdownIt-Anchor\" href=\"#final\">#</a> final</h6>\n<p>可以用于修饰类，方法，变量。</p>\n<p>final 修饰的类无法被继承。</p>\n<p>final 修饰的方法无法被子类重写。</p>\n<p>final 修饰的变量无法被更改，且必须在声明式就初始化。</p>\n<h6 id=\"abstract\"><a class=\"markdownIt-Anchor\" href=\"#abstract\">#</a> abstract</h6>\n<p>用于修饰类和方法，即抽象类，抽象方法。</p>\n<p>抽象类无法实例化，抽象方法没有方法体，且抽象方法只能存在于抽象类中。声明一个抽象类的唯一目的就是为相似的类提供一个父类，抽象类的非抽象子类必须实现所有父类的所有抽象方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fun1</span><span class=\"hljs-params\">()</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">B</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">A</span>&#123;<br>    <span class=\"hljs-comment\">//抽象子类，可以不实现fun1()</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fun2</span><span class=\"hljs-params\">()</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">C</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">B</span>&#123;<br>    <span class=\"hljs-comment\">//C不是抽象类，必须实现继承树上所有的抽象方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fun2</span><span class=\"hljs-params\">()</span> &#123;<br><br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fun1</span><span class=\"hljs-params\">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 style=\"text-align:right\">\n    ——By Liz\n</h1></h1>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/05/19/%E5%85%B3%E4%BA%8E%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%B7%A5%E5%85%B7Glide%E7%9A%84%E4%B8%80%E7%82%B9%E4%BB%8B%E7%BB%8D/",
            "url": "http://example.com/2023/05/19/%E5%85%B3%E4%BA%8E%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%B7%A5%E5%85%B7Glide%E7%9A%84%E4%B8%80%E7%82%B9%E4%BB%8B%E7%BB%8D/",
            "title": "关于图片加载工具Glide的一点介绍",
            "date_published": "2023-05-19T11:08:27.000Z",
            "content_html": "<p>在进行网络相关的代码编写的时候大家肯定都会遇到一些跟图片有关的问题，图片跟普通的信息不一样，是一个文件，接受起来是相当不方便的。那么！！！此时此刻，就需要一个非常牛逼的工具出场了，Glide 可以以各种各样的方法加载图片，堪称 “一行代码解决一切图片加载问题”。Glide 是一款由 Bump Technologies 开发的图片加载框架，要想使用 Glide，首先需要将这个库导入依赖库，搜索 glide 就行，或者在 gradle 文件中 dependencies 里加上一行（要用网络功能，记得声明网络权限）：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs groovy\">implementation <span class=\"hljs-string\">&#x27;com.github.bumptech.glide:glide:4.15.0&#x27;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"简单使用\"><a class=\"markdownIt-Anchor\" href=\"#简单使用\">#</a> 简单使用</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">url</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;xxxxx&quot;</span><br>Glide.with(<span class=\"hljs-built_in\">this</span>)<br>    .load(url)<br>    .into(imageView);<br></code></pre></td></tr></table></figure>\n<p>对于 Glide 加载图片而言，上面这一行代码是最简单，最理想化的情况。</p>\n<p><strong>with</strong> 方法支持传入 Context，Activity，Fragment 类型的参数。也就是说，不管你调用 Glide 的方法在 Activity 中还是在 Fragment 中，你都可以无脑传入一个 this，即使不在这俩项当中，你也可以使用任意传入的 Context 参数，退一万步讲，哪怕你在写这个类时根本忘记了传入 Context，你也可以直接传入 ApplicationContext（不建议）。with 方法传入的参数决定了 Glide 加载图片的生命周期，图片会随着 with 方法传入参数的销毁而销毁。</p>\n<p><strong>load</strong> 方法比 with 方法有更多的重载，可以说 Glide 的神奇之处就在 load 方法中，它支持传入 url 参数（就像上面的代码一样），会访问传入的网址获取图片，也可以直接传入 File 文件，甚至可以传入一个应用资源的 id，总之你随便塞一个可以获取图片的对象进去，它多半可以直接给你加载出来。</p>\n<p><strong>into</strong> 就不用说了，你想给这个图片加载到哪就填哪就行（前提是是个 View 控件）。</p>\n<h2 id=\"占位图\"><a class=\"markdownIt-Anchor\" href=\"#占位图\">#</a> 占位图</h2>\n<p>为什么说上面这一行代码是最简单最理想化的情况呢？当然是因为实际生产中，Glide 当然会有一些奇奇怪怪的问题出现，例如网太卡，图片加载太慢，或者是根本就加载不出来的情况等等，这个时候，就轮到<strong>占位图</strong>出手了。</p>\n<p>占位图分为三种，一种是<strong>图片加载中</strong>的占位图，第二种是<strong>图片加载失败</strong>的占位图，最后一种比较特殊，是当 load 方法所请求的<strong>图片不存在（为 null）<strong>时的占位图，他们对应的方法分别是</strong> placeholder</strong>，<strong>error</strong> 和<strong> fallback</strong></p>\n<h5 id=\"具体使用\"><a class=\"markdownIt-Anchor\" href=\"#具体使用\">#</a> 具体使用</h5>\n<p>以上面的代码为例，我们先来尝试使用 placeholder 方法、</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Glide.with(<span class=\"hljs-built_in\">this</span>)<br>    .load(url)<br>    .placeholder(R.drawable.loading)<br>    .into(imageView);<br></code></pre></td></tr></table></figure>\n<p>相信大家都能发现，在这里传入的参数是<strong> R.drawable.loading</strong>，这是因为 placeholder 方法只支持图片资源 id 参数，原因显而易见，你要加载的图片都还没加载出来，哪有工夫给你再另外加载一个占位图。</p>\n<p>load 方法会返回一个属于 **RequestBuilder<TranscodeType>** 类的对象，placeholder 就是这个类的方法，它同样会返回一个相同类的对象，并不影响后续方法的调用，后续的 error 方法和 fallback 方法也是一样。</p>\n<p>这三种方法在使用上不分先后，而且如果你多个方法一起使用，且需要多次调用 Glide，嫌弃代码重复，还可以手动创建 RequestOptions 对象，通过 apply 方法重复使用它</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">RequestOptions</span> <span class=\"hljs-variable\">options</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RequestOptions</span>()<br>            .placeholder(R.drawable.loading)<br>            .error(R.drawable.error)<br>            .fallback(R.drawable.fallback);<br>Glide.with(<span class=\"hljs-built_in\">this</span>)<br>            .load(url)<br>            .apply(options)<br>            .into(imageView);<br></code></pre></td></tr></table></figure>\n<h2 id=\"图片的大小与比例\"><a class=\"markdownIt-Anchor\" href=\"#图片的大小与比例\">#</a> 图片的大小与比例</h2>\n<p>除了网络问题之外，我们所需要显示的图片和布局控件之间也不可避免地会有一些冲突，例如当我们需要一张正方形 200*200 的图片，用户却上传了一张 1000*1000 像素的图片，或者 200*500 的图片。这时如果你不做任何处理，Glide 就会让你的图片以各种各样诡异的角度显示出来，比如你上传了一张全身美照然后却只显示了你的一张糊图图大脸。</p>\n<p>幸好，Glide 支持指定图片大小和缩略图，当然，作为地表最强（）图片显示工具，即使你不做任何操作，Glide 也不会容许内存浪费问题的出现，它会自动判断 ImageView 的大小然后只加载这么大的图片。当然，这是不够的。</p>\n<h5 id=\"override\"><a class=\"markdownIt-Anchor\" href=\"#override\">#</a> override</h5>\n<p>override 方法要求你提供两个 Int 参数，分别表示所显示图片的宽高像素要求，然后 Glide 就只会将图片加载成你所要求的大小，而不管你的 imageView 有多大</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Glide.with(<span class=\"hljs-built_in\">this</span>)<br>     .load(url)<br>     .apply(options)<br>     .override(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>)<br>     .into(imageView);<br></code></pre></td></tr></table></figure>\n<h5 id=\"centercrop与fitcenter\"><a class=\"markdownIt-Anchor\" href=\"#centercrop与fitcenter\">#</a> CenterCrop（）与 FitCenter（）</h5>\n<p>显然，截取一个固定大小的图片不是我们最想要的，用户上传他的全身美照不是让我们看他的糊图图大脸的，那么，为了用户，对它使用 centerCrop 和 fitCenter 吧！</p>\n<p>CenterCrop 和 FitCenter 这几个单词其实我们见过，对 ImageView 进行 ScaleType 属性设置的时候见过，他们也的确是相对应的。这两个方法不需要传参，只要调用就会起作用。以 centerCrop 举例，塞进 load 和 into 两个方法调用之间去就可以了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Glide.with(<span class=\"hljs-built_in\">this</span>)<br>     .load(url)<br>     .apply(options)<br>     .centerCrop()<br>     .into(imageView);<br></code></pre></td></tr></table></figure>\n<p>centerCrop 和 fitCenter 的区别不大，centerCrop 是将图片缩放到可以完全填充 imageView 的最小尺寸，fitCenter 则是将图片缩放到 imageView 可以完整地显示图片。简而言之，centerCrop 保证 imageView 被填满，但不保证图片全部被显示出来，图片依然有可能被截取掉一部分；fitCenter 保证图片全部显示出来，但不保证 imageView 被填满，布局控件中可能会有未被填充的部分。</p>\n<h2 id=\"图片的动态与静态\"><a class=\"markdownIt-Anchor\" href=\"#图片的动态与静态\">#</a> 图片的动态与静态</h2>\n<p>有的时候我们不仅仅想显示呆板的静态图片，还想显示一些更活泼的 gif 动图（甚至是本地的 mp4 文件），这个时候我就必须质问还在使用 Picasso 的你，什么年代了还在用传统图片显示工具！虽然 Picasso 支持对请求应用 Transformation 来达到各种变换，例如旋转或者一些简单滤镜，但是 Picasso 不支持 gif！而当 Glide 请求得到的图片是一个 Gif 时，Glide 会自动地显示出 Gif 而不需要你做任何额外的操作。当然如果你不想要 Gif，Glide 也会无条件地支持你。你可以使用 asBitmap 来使 gif 强行显示为静态，也就是只显示这张动图的第一帧图片</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\">Glide.with(<span class=\"hljs-built_in\">this</span>)<br>     .load(url)<br>     .apply(options)<br>     .centerCrop()<br>     .asBitmap()<br>     .into(imageView);<br></code></pre></td></tr></table></figure>\n<p>而你非常需要 gif 的话，也可以使用 asGif 来强行显示 gif</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Glide.with(<span class=\"hljs-built_in\">this</span>)<br>     .load(url)<br>     .apply(options)<br>     .centerCrop()<br>     .asGif()<br>     .into(imageView);<br></code></pre></td></tr></table></figure>\n<p>但是如果请求所得到的图片只是一张普通的图片而不是 gif，那么此时 Glide 就会调出 error 方法，显示占位图（所以这个方法没啥用）</p>\n<h2 id=\"图片加载的优先级\"><a class=\"markdownIt-Anchor\" href=\"#图片加载的优先级\">#</a> 图片加载的优先级</h2>\n<p>众所周知，如果我们不需要显示图片，那么我们就不需要显示图片；如果我们需要显示图片，那么我们往往就会需要多次显示图片。但是图片的显示需求有时并不相同，页面边缘的小广告已经出来了，女朋友发给你的照片却还在加载，用户这个时候可能就有点想骂人了。</p>\n<p>那么，轮到 priority 出场了，priority 需要你传入一个指定的枚举类，用以表示你希望这个图片被加载的优先级。这些优先级有：</p>\n<p><strong>Priority.LOW</strong>，<strong>Priority.NORMAL</strong>，<strong>Priority.HIGH</strong>，<strong>Priority.IMMEDIAT</strong> 四种</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Glide.with(<span class=\"hljs-built_in\">this</span>)<br>    .load(url)<br>    .priority(Priority.HIGH)<br>    .into(imageView);<br></code></pre></td></tr></table></figure>\n<p>现在用户也许可以先看见他的女朋友了。“也许” 是因为优先级并不是完全严格遵守的。Glide 将会用他们作为一个准则，尽可能的处理这些请求，但是不能保证所有的图片都会按照所有要求的顺序加载。</p>\n<p>from Liz</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/03/27/Retrofit%E5%85%A5%E9%97%A8/",
            "url": "http://example.com/2023/03/27/Retrofit%E5%85%A5%E9%97%A8/",
            "title": "Retrofit入门",
            "date_published": "2023-03-27T14:57:03.000Z",
            "content_html": "<p>因为原理跟 okhttp 有关就不讲了，这里就只讲一些工作方式，以及一些 bug</p>\n<span id=\"more\"></span>\n<h2 id=\"建立api接口和返回body的类\"><a class=\"markdownIt-Anchor\" href=\"#建立api接口和返回body的类\">#</a> 建立 Api 接口和返回 body 的类</h2>\n<p>首先需要建立一个 Api 接口，在需要用到网络请求时创建一个 Api 接口实例，通过这个实例对象调用方法来实现网络请求，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Api</span> &#123;  <br>    <span class=\"hljs-meta\">@POST(&quot;login&quot;)</span>    <br>    <span class=\"hljs-meta\">@FormUrlEncoded</span>    <br>    Call&lt;SignInResult&gt; <span class=\"hljs-title function_\">loginTest</span>        <br>        <span class=\"hljs-params\">(<span class=\"hljs-meta\">@Field(&quot;username&quot;)</span>String username, <span class=\"hljs-meta\">@Field(&quot;password&quot;)</span>String password)</span>; <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在这几行代码当中，蓝字 Api 显然是随便取的接口名称，下方的 loginTest 方法就是创建 Api 接口实例后需要调用的方法，他的返回体是一个 Retrofit 内部封装的类 Call<Class>类，尖括号中是创建的一个用于接收返回体的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SignInResult</span> &#123;    <br>    <span class=\"hljs-keyword\">private</span> String msg;    <br>    <span class=\"hljs-keyword\">private</span> String token;     <br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getMsg</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> msg;    <br>    &#125;    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setMsg</span><span class=\"hljs-params\">(String msg)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.msg = msg;    <br>    &#125;    <br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getToken</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> token;    <br>    &#125;    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setToken</span><span class=\"hljs-params\">(String token)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.token = token;    <br>    &#125; <br><br></code></pre></td></tr></table></figure>\n<p>这个 SignInResult 用于接收此次 loginTest 请求得到的返回信息，举例登陆成功时，后端所返回的 json 信息是这样的</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br><span class=\"hljs-attr\">&quot;msg&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;登录成功,获得token.&quot;</span><span class=\"hljs-punctuation\">,</span>    \t\t\t\t<span class=\"hljs-attr\">&quot;token&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySWQiOjE2LCJleHAiOjE2Nzk5NzgzNzYsImlhdCI6MTY3NzM4NjM3NiwiaXNzIjoiNDMuMTM4LjYxLjQ5Iiwic3ViIjoi5Y2O5bCP5ZyILiJ9.7TWOTCjPTGihPhn2v0wwwUqdLpF8x4cMm3bfw1wAbHs&quot;</span> <br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n<p>在这里，要接收后端所返回的 “msg” 信息，那么上面所写的 SignInResult 类中就必须有一个对应的 String 字段名为 “msg”，假设 SignInResult 中的字段名不是 “msg” 而是 “message”，那么接收到后端返回的信息之后，就无法得到这个” 登陆成功，获得 token“的字符串，此时调用 getMsg 方法也只会得到 null。</p>\n<p>同理，登陆失败之后，后端返回的信息是这样的</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;msg&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Invalid username or password&quot;</span> <br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n<p>此时依然可以用上面的 SIgnInResult 类接收信息，得到这个 msg 信息，然后通过 getToken 得到了 null 来判断登陆失败。</p>\n<h2 id=\"调用retrofit网络请求\"><a class=\"markdownIt-Anchor\" href=\"#调用retrofit网络请求\">#</a> <strong>调用 Retrofit 网络请求</strong></h2>\n<p>创建完网络请求需要的 Api 接口之后，就可以直接到需要用到这个网络请求的 Activity 当中去敲代码了！</p>\n<p>毫无疑问首先我们要创建 Retrofit 实例和上一步创建的 Api 接口实例，例如</p>\n<p>private Retrofit mRetrofit; private Api mApi;</p>\n<p>然后将这个 Retrofit 实例与 url 绑定</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">mRetrofit=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Retrofit</span>.Builder()<br>    .baseUrl(<span class=\"hljs-string\">&quot;xxx&quot;</span>)                <br>    .addConverterFactory(GsonConverterFactory.create())<br>    .build();<br></code></pre></td></tr></table></figure>\n<p>第一行代码中的 baseUrl 是这个网络请求中需要链接的 url，一般是服务器地址，第二行代码是用于把返回的 json 信息解码为我们创建的 SIgnInResult 类对象。</p>\n<p>然后通过这个 Retrofit 实例给 Api 接口实例赋值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">mApi=mRetrofit.create(Api.class);<br></code></pre></td></tr></table></figure>\n<p>创建完毕之后，首先要确定这次网络请求要发送的信息是什么</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Call&lt;SignInResult&gt; apiResult=mApi.loginTest(usernameEdit.getText().toString(),passwordEdit.getText().toString());<br></code></pre></td></tr></table></figure>\n<p>也就是说，创建一个 Call<SignInResult>实例，给它赋值为前面创建的 Api 接口实例调用方法 loginTest 后得到的返回值，而这里调用 loginTest 需要提供的两个参数是创建 Api 接口时就写了的，用户名和密码。</p>\n<p>然后将这个实例加入需要发送的网络请求的队列当中，enqueue 指异步请求，同步请求为 ex 什么东西（剩下的交给 AS），同步与异步的区别就是同步请求要等待前一个请求得到返回之后才能发送下一个请求，而异步可以像一个服务器的舔狗一样一直发，就算不回也一直发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">apiResult.enqueue(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Callback</span>&lt;SignInResult&gt;() &#123;             <br>    <span class=\"hljs-meta\">@Override</span>             <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onResponse</span>                 <br>        <span class=\"hljs-params\">(Call&lt;SignInResult&gt; call, Response&lt;SignInResult&gt; response)</span> &#123;<br>        String token=response.body().getToken();                        <br>        <span class=\"hljs-keyword\">if</span> (token!=<span class=\"hljs-literal\">null</span>)&#123;<br>            LoginSucceeded();<span class=\"hljs-comment\">//使用这个方法来启动下一个Activity</span><br>            saveToken(token);<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123; Toast.makeText(SignInActivity.<span class=\"hljs-built_in\">this</span>,response.body().getMsg().toString(),Toast.LENGTH_SHORT).show();<br>             &#125;<br>    &#125;<br>    <br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onFailure</span><br>        <span class=\"hljs-params\">(Call&lt;SignInResult&gt; call, Throwable t)</span> &#123;<br>        Toast.makeText(SignInActivity.<span class=\"hljs-built_in\">this</span>,<span class=\"hljs-string\">&quot;登陆失败！&quot;</span>,Toast.LENGTH_SHORT).show();<br>    &#125;  <br>    <br>&#125;);<br>System.out.println(<span class=\"hljs-string\">&quot;XXX&quot;</span>);<br></code></pre></td></tr></table></figure>\n<p>输入 enqueue 之后，AS 会自动弹出两个空的方法，onResponse 和 onFailure，这两个方法中前者是请求成功调用的方法，后者是请求失败调用的方法。这里需要注意的是，登录失败不是请求失败，登陆失败本身也需要请求成功来获得 &quot;Invalid username or password&quot; 这个返回数据。</p>\n<p>在 onResponse 方法中，通过调用实例对象 response 的 body（）方法得到请求回复的 body，这个 body 其实就是之前写的 SignInResult 类的一个实例对象，调用我们自己写的 getToken（）方法，就可以得到返回的 json 数据中的 token，然后通过判断 token 是否为空来判断是否登陆成功（判断返回的字符串应该也可以），登陆成功则直接启动下一个 Activity 将 token 保存下来，登陆失败则用 Toast 弹出消息。</p>\n<p>这里需要注意的是，当你发起请求时，Retrofit 会在内部开启一个子线程，后端返回了数据之后再切换回主线程，也就是说 onResponse 和 onFailure 中的方法确实会等待收到返回体后再执行，但 enqueue 后小括号（）之后的语句不会，例如这个 System.out.println，所以如果你的下一步操作需要等待返回体，最好把它塞到 onResonse 中去执行，或者采取一些其他的调整线程的措施。</p>\n<h2 id=\"杂谈\"><a class=\"markdownIt-Anchor\" href=\"#杂谈\">#</a> <strong>杂谈</strong></h2>\n<h5 id=\"注解\"><a class=\"markdownIt-Anchor\" href=\"#注解\">#</a> <strong>注解</strong></h5>\n<p>在前面的 Api 接口当中，loginTest 方法前面及中间有些注解，例如 @POST 和 @Field，还有很多其他注解，可以到网上找关于 Retrofit 注解的教程学习，单纯使用的话就照着 ApiFox 上的填，最好还是去看一下关于注解的教程，看一些 okhttp 的使用教程，注解学明白了写 Retrofit 就算入门了（大概</p>\n<h5 id=\"返回数据\"><a class=\"markdownIt-Anchor\" href=\"#返回数据\">#</a> <strong>返回数据</strong></h5>\n<p>一般都是 json 格式，普通的键值对可以由 json 解码器帮助解码获得，但是有些复杂的 json 数据</p>\n<p>例如（点名批评）：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-attr\">&quot;code&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">200</span><span class=\"hljs-punctuation\">,</span>    <br><span class=\"hljs-attr\">&quot;data&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span>        <br>    <span class=\"hljs-attr\">&quot;ID&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">85</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;CreatedAt&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;2023-02-28T19:39:20+08:00&quot;</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;UpdatedAt&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;2023-02-28T19:39:20+08:00&quot;</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;DeletedAt&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">null</span></span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;title&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;11&quot;</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;author_id&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;日常唠嗑&quot;</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;content&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;12345&quot;</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;likes&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">,</span>        <br>    <span class=\"hljs-attr\">&quot;comment_no&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span>    <br><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span>   <br><span class=\"hljs-attr\">&quot;msg&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;查询到指定的帖子&quot;</span><br></code></pre></td></tr></table></figure>\n<p>像这样的大肠包小肠的 json 数据，解码器就无能为力了，需要自己在创建用于接收返回数据的类时创建一个 json 字段，或者用强硬地用 String 接收（）</p>\n<h5 id=\"依赖库\"><a class=\"markdownIt-Anchor\" href=\"#依赖库\">#</a> <strong>依赖库</strong></h5>\n<p>Retrofit 和 json 解码器都需要导入依赖库，我在这贴出来，最新版本应该是 2.9.0</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">implementation &#x27;com.squareup.retrofit2:retrofit:2.9.0&#x27; <br>implementation &#x27;com.squareup.retrofit2:converter-gson:2.9.0&#x27;<br></code></pre></td></tr></table></figure>\n<h5 id=\"权限\"><a class=\"markdownIt-Anchor\" href=\"#权限\">#</a> <strong>权限</strong></h5>\n<p>Retrofit 需要使用网络，必须要在 AndroidManifest 中 application 之外的部分申请网络访问权限。如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">&quot;android.permission.INTERNET&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n<p>否则进行网络请求之后每次都只会调用 onFailure 方法。</p>\n<h5 id=\"安全声明我不知道这是什么\"><a class=\"markdownIt-Anchor\" href=\"#安全声明我不知道这是什么\">#</a> <strong>安全声明（？我不知道这是什么）</strong></h5>\n<p>需要在 res/xml 包下创建一个新的 xml 文件，如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version =<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding =<span class=\"hljs-string\">&quot;utf-8&quot;</span>?&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">network-security-config</span>&gt;</span>    <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">base-config</span> <span class=\"hljs-attr\">cleartextTrafficPermitted</span>=<span class=\"hljs-string\">&quot;true&quot;</span> /&gt;</span> <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">network-security-config</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>然后在 AndroidManifest 中 application 之内的部分调用它：</p>\n<p>android:networkSecurityConfig=“@xml/network_config”</p>\n<p>不加的话也是导致只能 onFailure。</p>\n",
            "tags": []
        }
    ]
}